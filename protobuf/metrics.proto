syntax = "proto3";
package abacus.protobuf;
option go_package = "abacus/protobuf";

// Specifies the endianness for multi-byte values
enum Endianness {
    LITTLE = 0;  // Little-endian byte order
    BIG = 1;     // Big-endian byte order
}

// A gauge used when the value can increase or decrease
message Gauge{

    // Whether the metric is optional
    bool optional = 1;
}

// A counter used when the value is ever-increasing
message Counter{

    // Whether the metric is optional
    bool optional = 1;
}

// A constant used when the value is fixed
message Constant{
}


// Metadata for unsigned 64-bit metrics
message UInt64Metric {
    string description = 1;   // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Counter counter = 3;    // Counter metric
        Constant constant = 4;  // Constant metric
    }
    optional string unit = 5; // Unit of measurement
    optional uint64 min = 6;  // Minimum allowable value
    optional uint64 max = 7;  // Maximum allowable value
}

// Metadata for signed 64-bit metrics
message Int64Metric {
    string description = 1;   // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Counter counter = 3;    // Counter metric
        Constant constant = 4;  // Constant metric
    }
    optional string unit = 5; // Unit of measurement
    optional int64 min = 6;   // Minimum allowable value
    optional int64 max = 7;   // Maximum allowable value
}

// Metadata for unsigned 32-bit metrics
message UInt32Metric {
    string description = 1;   // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Counter counter = 3;    // Counter metric
        Constant constant = 4;  // Constant metric
    }
    optional string unit = 5; // Unit of measurement
    optional uint32 min = 6;  // Minimum allowable value
    optional uint32 max = 7;  // Maximum allowable value
}

// Metadata for signed 32-bit metrics
message Int32Metric {
    string description = 1;   // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Counter counter = 3;    // Counter metric
        Constant constant = 4;  // Constant metric
    }
    optional string unit = 5; // Unit of measurement
    optional int32 min = 6;   // Minimum allowable value
    optional int32 max = 7;   // Maximum allowable value
}

// Metadata for 64-bit floating-point metrics
message Float64Metric {
    string description = 1;   // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Counter counter = 3;    // Counter metric
        Constant constant = 4;  // Constant metric
    }
    optional string unit = 5; // Unit of measurement
    optional double min = 6;  // Minimum allowable value
    optional double max = 7;  // Maximum allowable value
}

// Metadata for 32-bit floating-point metrics
message Float32Metric {
    string description = 1;   // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Counter counter = 3;    // Counter metric
        Constant constant = 4;  // Constant metric
    }
    optional string unit = 5; // Unit of measurement
    optional float min = 6;   // Minimum allowable value
    optional float max = 7;   // Maximum allowable value
}

// Metadata for boolean metrics
message BoolMetric {
    string description = 1;   // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Constant constant = 3;  // Constant metric
    }
    optional string unit = 4; // Unit of measurement
}

// Metadata for enumerated metrics
message Enum8Metric {
    message EnumValue {
        string name = 1;                   // Enum name
        optional string description = 2;   // Enum description
    }
    string description = 1;            // Metric description
    // The kind of metric
    oneof kind {
        Gauge gauge = 2;        // Gauge metric
        Constant constant = 3;  // Constant metric
    }
    optional string unit = 4;          // Unit of measurement
    map<uint32, EnumValue> values = 5; // Mapping from packed index to enum info
}

message Metric
{
    uint32 offset = 1;              // Offset into packed memory for the value
    oneof type {
        UInt64Metric uint64 = 3;    // Metadata for unsigned 64-bit metrics
        Int64Metric int64 = 4;      // Metadata for signed 64-bit metrics
        UInt32Metric uint32 = 5;    // Metadata for unsigned 32-bit metrics
        Int32Metric int32 = 6;      // Metadata for signed 32-bit metrics
        Float64Metric float64 = 7;  // Metadata for 64-bit floating-point metrics
        Float32Metric float32 = 8;  // Metadata for 32-bit floating-point metrics
        BoolMetric boolean = 9;     // Metadata for boolean metrics
        Enum8Metric enum8 = 10;     // Metadata for enumerated metrics
    }
}

// Metadata collection for all metrics
message MetricsMetadata {
    uint32 protocol_version = 1;        // Protocol version for compatibility
    Endianness endianness = 2;          // Endianness of packed memory
    fixed32 sync_value = 3;             // Synchronization value
    map<string, Metric> metrics = 4;    // Mapping from metric name to metadata
}
