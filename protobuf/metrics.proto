syntax = "proto3";
package abacus.protobuf;
option go_package = "abacus/protobuf";

// Specifies the kind of metric
enum Kind {
    COUNTER = 0;   // Counter metric
    CONSTANT = 1;  // Constant metric
    GAUGE = 2;     // Gauge metric
}

// Specifies the endianness for multi-byte values
enum Endianness {
    LITTLE = 0;  // Little-endian byte order
    BIG = 1;     // Big-endian byte order
}

// Metadata for unsigned 64-bit metrics
message UInt64Metric {
    string description = 1;   // Metric description
    Kind kind = 2;            // Kind of metric
    optional string unit = 3; // Unit of measurement
    optional uint64 min = 4;  // Minimum allowable value
    optional uint64 max = 5;  // Maximum allowable value
}

// Metadata for signed 64-bit metrics
message Int64Metric {
    string description = 1;   // Metric description
    Kind kind = 2;            // Kind of metric
    optional string unit = 3; // Unit of measurement
    optional int64 min = 4;   // Minimum allowable value
    optional int64 max = 5;   // Maximum allowable value
}

// Metadata for unsigned 32-bit metrics
message UInt32Metric {
    string description = 1;   // Metric description
    Kind kind = 2;            // Kind of metric
    optional string unit = 3; // Unit of measurement
    optional uint32 min = 4;  // Minimum allowable value
    optional uint32 max = 5;  // Maximum allowable value
}

// Metadata for signed 32-bit metrics
message Int32Metric {
    string description = 1;   // Metric description
    Kind kind = 2;            // Kind of metric
    optional string unit = 3; // Unit of measurement
    optional int32 min = 4;   // Minimum allowable value
    optional int32 max = 5;   // Maximum allowable value
}

// Metadata for 64-bit floating-point metrics
message Float64Metric {
    string description = 1;   // Metric description
    Kind kind = 2;            // Kind of metric
    optional string unit = 3; // Unit of measurement
    optional double min = 4;  // Minimum allowable value
    optional double max = 5;  // Maximum allowable value
}

// Metadata for 32-bit floating-point metrics
message Float32Metric {
    string description = 1;   // Metric description
    Kind kind = 2;            // Kind of metric
    optional string unit = 3; // Unit of measurement
    optional float min = 4;   // Minimum allowable value
    optional float max = 5;   // Maximum allowable value
}

// Metadata for boolean metrics
message BoolMetric {
    string description = 1;   // Metric description
    Kind kind = 2;            // Kind of metric
    optional string unit = 3; // Unit of measurement
}

message EnumValue {
    string name = 1;                   // Enum name
    optional string description = 2;   // Enum description
}

// Metadata for enumerated metrics
message Enum8Metric {
    string description = 1;            // Metric description
    optional string unit = 2;          // Unit of measurement
    map<uint32, EnumValue> values = 3; // Mapping from packed index to enum info
}

message Metric
{
    uint32 offset = 1;              // Offset into packed memory for the value
    oneof type {
        UInt64Metric uint64 = 2;    // Metadata for unsigned 64-bit metrics
        Int64Metric int64 = 3;      // Metadata for signed 64-bit metrics
        UInt32Metric uint32 = 4;    // Metadata for unsigned 32-bit metrics
        Int32Metric int32 = 5;      // Metadata for signed 32-bit metrics
        Float64Metric float64 = 6;  // Metadata for 64-bit floating-point metrics
        Float32Metric float32 = 7;  // Metadata for 32-bit floating-point metrics
        BoolMetric boolean = 8;        // Metadata for boolean metrics
        Enum8Metric enum8 = 9;      // Metadata for enumerated metrics
    }
}

// Metadata collection for all metrics
message MetricsMetadata {
    uint32 protocol_version = 1;        // Protocol version for compatibility
    Endianness endianness = 2;          // Endianness of packed memory
    uint32 sync_value = 3;              // Synchronization value
    map<string, Metric> metrics = 4;    // Mapping from metric name to metadata
}
