// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abacus/protobuf/metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_abacus_2fprotobuf_2fmetrics_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_abacus_2fprotobuf_2fmetrics_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_abacus_2fprotobuf_2fmetrics_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_abacus_2fprotobuf_2fmetrics_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto;
namespace abacus {
namespace protobuf {
class BoolMetric;
struct BoolMetricDefaultTypeInternal;
extern BoolMetricDefaultTypeInternal _BoolMetric_default_instance_;
class Constant;
struct ConstantDefaultTypeInternal;
extern ConstantDefaultTypeInternal _Constant_default_instance_;
class Counter;
struct CounterDefaultTypeInternal;
extern CounterDefaultTypeInternal _Counter_default_instance_;
class Enum8Metric;
struct Enum8MetricDefaultTypeInternal;
extern Enum8MetricDefaultTypeInternal _Enum8Metric_default_instance_;
class Enum8Metric_EnumValue;
struct Enum8Metric_EnumValueDefaultTypeInternal;
extern Enum8Metric_EnumValueDefaultTypeInternal _Enum8Metric_EnumValue_default_instance_;
class Enum8Metric_ValuesEntry_DoNotUse;
struct Enum8Metric_ValuesEntry_DoNotUseDefaultTypeInternal;
extern Enum8Metric_ValuesEntry_DoNotUseDefaultTypeInternal _Enum8Metric_ValuesEntry_DoNotUse_default_instance_;
class Float32Metric;
struct Float32MetricDefaultTypeInternal;
extern Float32MetricDefaultTypeInternal _Float32Metric_default_instance_;
class Float64Metric;
struct Float64MetricDefaultTypeInternal;
extern Float64MetricDefaultTypeInternal _Float64Metric_default_instance_;
class Gauge;
struct GaugeDefaultTypeInternal;
extern GaugeDefaultTypeInternal _Gauge_default_instance_;
class Int32Metric;
struct Int32MetricDefaultTypeInternal;
extern Int32MetricDefaultTypeInternal _Int32Metric_default_instance_;
class Int64Metric;
struct Int64MetricDefaultTypeInternal;
extern Int64MetricDefaultTypeInternal _Int64Metric_default_instance_;
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricsMetadata;
struct MetricsMetadataDefaultTypeInternal;
extern MetricsMetadataDefaultTypeInternal _MetricsMetadata_default_instance_;
class MetricsMetadata_MetricsEntry_DoNotUse;
struct MetricsMetadata_MetricsEntry_DoNotUseDefaultTypeInternal;
extern MetricsMetadata_MetricsEntry_DoNotUseDefaultTypeInternal _MetricsMetadata_MetricsEntry_DoNotUse_default_instance_;
class StringMetric;
struct StringMetricDefaultTypeInternal;
extern StringMetricDefaultTypeInternal _StringMetric_default_instance_;
class UInt32Metric;
struct UInt32MetricDefaultTypeInternal;
extern UInt32MetricDefaultTypeInternal _UInt32Metric_default_instance_;
class UInt64Metric;
struct UInt64MetricDefaultTypeInternal;
extern UInt64MetricDefaultTypeInternal _UInt64Metric_default_instance_;
}  // namespace protobuf
}  // namespace abacus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace abacus {
namespace protobuf {
enum Endianness : int {
  LITTLE = 0,
  BIG = 1,
  Endianness_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Endianness_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Endianness_IsValid(int value);
constexpr Endianness Endianness_MIN = static_cast<Endianness>(0);
constexpr Endianness Endianness_MAX = static_cast<Endianness>(1);
constexpr int Endianness_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Endianness_descriptor();
template <typename T>
const std::string& Endianness_Name(T value) {
  static_assert(std::is_same<T, Endianness>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Endianness_Name().");
  return Endianness_Name(static_cast<Endianness>(value));
}
template <>
inline const std::string& Endianness_Name(Endianness value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Endianness_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Endianness_Parse(absl::string_view name, Endianness* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Endianness>(
      Endianness_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Gauge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Gauge) */ {
 public:
  inline Gauge() : Gauge(nullptr) {}
  ~Gauge() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Gauge(::google::protobuf::internal::ConstantInitialized);

  Gauge(const Gauge& from);
  Gauge(Gauge&& from) noexcept
    : Gauge() {
    *this = ::std::move(from);
  }

  inline Gauge& operator=(const Gauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gauge& operator=(Gauge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gauge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gauge* internal_default_instance() {
    return reinterpret_cast<const Gauge*>(
               &_Gauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gauge& a, Gauge& b) {
    a.Swap(&b);
  }
  inline void Swap(Gauge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gauge* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gauge* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gauge>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Gauge& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Gauge& from) {
    Gauge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gauge* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Gauge";
  }
  protected:
  explicit Gauge(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalFieldNumber = 1,
  };
  // bool optional = 1;
  void clear_optional() ;
  bool optional() const;
  void set_optional(bool value);

  private:
  bool _internal_optional() const;
  void _internal_set_optional(bool value);

  public:
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Gauge)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool optional_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Counter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Counter) */ {
 public:
  inline Counter() : Counter(nullptr) {}
  ~Counter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Counter(::google::protobuf::internal::ConstantInitialized);

  Counter(const Counter& from);
  Counter(Counter&& from) noexcept
    : Counter() {
    *this = ::std::move(from);
  }

  inline Counter& operator=(const Counter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Counter& operator=(Counter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Counter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Counter* internal_default_instance() {
    return reinterpret_cast<const Counter*>(
               &_Counter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Counter& a, Counter& b) {
    a.Swap(&b);
  }
  inline void Swap(Counter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Counter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Counter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Counter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Counter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Counter& from) {
    Counter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Counter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Counter";
  }
  protected:
  explicit Counter(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalFieldNumber = 1,
  };
  // bool optional = 1;
  void clear_optional() ;
  bool optional() const;
  void set_optional(bool value);

  private:
  bool _internal_optional() const;
  void _internal_set_optional(bool value);

  public:
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Counter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool optional_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Constant final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:abacus.protobuf.Constant) */ {
 public:
  inline Constant() : Constant(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Constant(::google::protobuf::internal::ConstantInitialized);

  Constant(const Constant& from);
  Constant(Constant&& from) noexcept
    : Constant() {
    *this = ::std::move(from);
  }

  inline Constant& operator=(const Constant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constant& operator=(Constant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Constant& default_instance() {
    return *internal_default_instance();
  }
  static inline const Constant* internal_default_instance() {
    return reinterpret_cast<const Constant*>(
               &_Constant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Constant& a, Constant& b) {
    a.Swap(&b);
  }
  inline void Swap(Constant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Constant* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Constant* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Constant>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Constant& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Constant& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Constant";
  }
  protected:
  explicit Constant(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:abacus.protobuf.Constant)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class UInt64Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.UInt64Metric) */ {
 public:
  inline UInt64Metric() : UInt64Metric(nullptr) {}
  ~UInt64Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UInt64Metric(::google::protobuf::internal::ConstantInitialized);

  UInt64Metric(const UInt64Metric& from);
  UInt64Metric(UInt64Metric&& from) noexcept
    : UInt64Metric() {
    *this = ::std::move(from);
  }

  inline UInt64Metric& operator=(const UInt64Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt64Metric& operator=(UInt64Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInt64Metric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kCounter = 4,
    kConstant = 5,
    KIND_NOT_SET = 0,
  };

  static inline const UInt64Metric* internal_default_instance() {
    return reinterpret_cast<const UInt64Metric*>(
               &_UInt64Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UInt64Metric& a, UInt64Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt64Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt64Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UInt64Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UInt64Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UInt64Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UInt64Metric& from) {
    UInt64Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt64Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.UInt64Metric";
  }
  protected:
  explicit UInt64Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 6,
    kMinFieldNumber = 7,
    kMaxFieldNumber = 8,
    kOffsetFieldNumber = 1,
    kGaugeFieldNumber = 3,
    kCounterFieldNumber = 4,
    kConstantFieldNumber = 5,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 6;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // optional uint64 min = 7;
  bool has_min() const;
  void clear_min() ;
  ::uint64_t min() const;
  void set_min(::uint64_t value);

  private:
  ::uint64_t _internal_min() const;
  void _internal_set_min(::uint64_t value);

  public:
  // optional uint64 max = 8;
  bool has_max() const;
  void clear_max() ;
  ::uint64_t max() const;
  void set_max(::uint64_t value);

  private:
  ::uint64_t _internal_max() const;
  void _internal_set_max(::uint64_t value);

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Counter counter = 4;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;

  public:
  void clear_counter() ;
  const ::abacus::protobuf::Counter& counter() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Counter* release_counter();
  ::abacus::protobuf::Counter* mutable_counter();
  void set_allocated_counter(::abacus::protobuf::Counter* value);
  void unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* value);
  ::abacus::protobuf::Counter* unsafe_arena_release_counter();

  private:
  const ::abacus::protobuf::Counter& _internal_counter() const;
  ::abacus::protobuf::Counter* _internal_mutable_counter();

  public:
  // .abacus.protobuf.Constant constant = 5;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.UInt64Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_counter();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 3, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::uint64_t min_;
    ::uint64_t max_;
    ::uint32_t offset_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Counter* counter_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Int64Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Int64Metric) */ {
 public:
  inline Int64Metric() : Int64Metric(nullptr) {}
  ~Int64Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64Metric(::google::protobuf::internal::ConstantInitialized);

  Int64Metric(const Int64Metric& from);
  Int64Metric(Int64Metric&& from) noexcept
    : Int64Metric() {
    *this = ::std::move(from);
  }

  inline Int64Metric& operator=(const Int64Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Metric& operator=(Int64Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Metric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kCounter = 4,
    kConstant = 5,
    KIND_NOT_SET = 0,
  };

  static inline const Int64Metric* internal_default_instance() {
    return reinterpret_cast<const Int64Metric*>(
               &_Int64Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Int64Metric& a, Int64Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64Metric& from) {
    Int64Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Int64Metric";
  }
  protected:
  explicit Int64Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 6,
    kMinFieldNumber = 7,
    kMaxFieldNumber = 8,
    kOffsetFieldNumber = 1,
    kGaugeFieldNumber = 3,
    kCounterFieldNumber = 4,
    kConstantFieldNumber = 5,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 6;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // optional int64 min = 7;
  bool has_min() const;
  void clear_min() ;
  ::int64_t min() const;
  void set_min(::int64_t value);

  private:
  ::int64_t _internal_min() const;
  void _internal_set_min(::int64_t value);

  public:
  // optional int64 max = 8;
  bool has_max() const;
  void clear_max() ;
  ::int64_t max() const;
  void set_max(::int64_t value);

  private:
  ::int64_t _internal_max() const;
  void _internal_set_max(::int64_t value);

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Counter counter = 4;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;

  public:
  void clear_counter() ;
  const ::abacus::protobuf::Counter& counter() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Counter* release_counter();
  ::abacus::protobuf::Counter* mutable_counter();
  void set_allocated_counter(::abacus::protobuf::Counter* value);
  void unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* value);
  ::abacus::protobuf::Counter* unsafe_arena_release_counter();

  private:
  const ::abacus::protobuf::Counter& _internal_counter() const;
  ::abacus::protobuf::Counter* _internal_mutable_counter();

  public:
  // .abacus.protobuf.Constant constant = 5;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Int64Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_counter();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 3, 59, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::int64_t min_;
    ::int64_t max_;
    ::uint32_t offset_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Counter* counter_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class UInt32Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.UInt32Metric) */ {
 public:
  inline UInt32Metric() : UInt32Metric(nullptr) {}
  ~UInt32Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UInt32Metric(::google::protobuf::internal::ConstantInitialized);

  UInt32Metric(const UInt32Metric& from);
  UInt32Metric(UInt32Metric&& from) noexcept
    : UInt32Metric() {
    *this = ::std::move(from);
  }

  inline UInt32Metric& operator=(const UInt32Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt32Metric& operator=(UInt32Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInt32Metric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kCounter = 4,
    kConstant = 5,
    KIND_NOT_SET = 0,
  };

  static inline const UInt32Metric* internal_default_instance() {
    return reinterpret_cast<const UInt32Metric*>(
               &_UInt32Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UInt32Metric& a, UInt32Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt32Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt32Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UInt32Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UInt32Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UInt32Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UInt32Metric& from) {
    UInt32Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt32Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.UInt32Metric";
  }
  protected:
  explicit UInt32Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 6,
    kOffsetFieldNumber = 1,
    kMinFieldNumber = 7,
    kMaxFieldNumber = 8,
    kGaugeFieldNumber = 3,
    kCounterFieldNumber = 4,
    kConstantFieldNumber = 5,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 6;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // optional uint32 min = 7;
  bool has_min() const;
  void clear_min() ;
  ::uint32_t min() const;
  void set_min(::uint32_t value);

  private:
  ::uint32_t _internal_min() const;
  void _internal_set_min(::uint32_t value);

  public:
  // optional uint32 max = 8;
  bool has_max() const;
  void clear_max() ;
  ::uint32_t max() const;
  void set_max(::uint32_t value);

  private:
  ::uint32_t _internal_max() const;
  void _internal_set_max(::uint32_t value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Counter counter = 4;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;

  public:
  void clear_counter() ;
  const ::abacus::protobuf::Counter& counter() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Counter* release_counter();
  ::abacus::protobuf::Counter* mutable_counter();
  void set_allocated_counter(::abacus::protobuf::Counter* value);
  void unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* value);
  ::abacus::protobuf::Counter* unsafe_arena_release_counter();

  private:
  const ::abacus::protobuf::Counter& _internal_counter() const;
  ::abacus::protobuf::Counter* _internal_mutable_counter();

  public:
  // .abacus.protobuf.Constant constant = 5;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.UInt32Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_counter();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 3, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::uint32_t offset_;
    ::uint32_t min_;
    ::uint32_t max_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Counter* counter_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Int32Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Int32Metric) */ {
 public:
  inline Int32Metric() : Int32Metric(nullptr) {}
  ~Int32Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int32Metric(::google::protobuf::internal::ConstantInitialized);

  Int32Metric(const Int32Metric& from);
  Int32Metric(Int32Metric&& from) noexcept
    : Int32Metric() {
    *this = ::std::move(from);
  }

  inline Int32Metric& operator=(const Int32Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Metric& operator=(Int32Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Metric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kCounter = 4,
    kConstant = 5,
    KIND_NOT_SET = 0,
  };

  static inline const Int32Metric* internal_default_instance() {
    return reinterpret_cast<const Int32Metric*>(
               &_Int32Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Int32Metric& a, Int32Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int32Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int32Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int32Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int32Metric& from) {
    Int32Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Int32Metric";
  }
  protected:
  explicit Int32Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 6,
    kOffsetFieldNumber = 1,
    kMinFieldNumber = 7,
    kMaxFieldNumber = 8,
    kGaugeFieldNumber = 3,
    kCounterFieldNumber = 4,
    kConstantFieldNumber = 5,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 6;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // optional int32 min = 7;
  bool has_min() const;
  void clear_min() ;
  ::int32_t min() const;
  void set_min(::int32_t value);

  private:
  ::int32_t _internal_min() const;
  void _internal_set_min(::int32_t value);

  public:
  // optional int32 max = 8;
  bool has_max() const;
  void clear_max() ;
  ::int32_t max() const;
  void set_max(::int32_t value);

  private:
  ::int32_t _internal_max() const;
  void _internal_set_max(::int32_t value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Counter counter = 4;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;

  public:
  void clear_counter() ;
  const ::abacus::protobuf::Counter& counter() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Counter* release_counter();
  ::abacus::protobuf::Counter* mutable_counter();
  void set_allocated_counter(::abacus::protobuf::Counter* value);
  void unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* value);
  ::abacus::protobuf::Counter* unsafe_arena_release_counter();

  private:
  const ::abacus::protobuf::Counter& _internal_counter() const;
  ::abacus::protobuf::Counter* _internal_mutable_counter();

  public:
  // .abacus.protobuf.Constant constant = 5;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Int32Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_counter();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 3, 59, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::uint32_t offset_;
    ::int32_t min_;
    ::int32_t max_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Counter* counter_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Float64Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Float64Metric) */ {
 public:
  inline Float64Metric() : Float64Metric(nullptr) {}
  ~Float64Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Float64Metric(::google::protobuf::internal::ConstantInitialized);

  Float64Metric(const Float64Metric& from);
  Float64Metric(Float64Metric&& from) noexcept
    : Float64Metric() {
    *this = ::std::move(from);
  }

  inline Float64Metric& operator=(const Float64Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float64Metric& operator=(Float64Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float64Metric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kCounter = 4,
    kConstant = 5,
    KIND_NOT_SET = 0,
  };

  static inline const Float64Metric* internal_default_instance() {
    return reinterpret_cast<const Float64Metric*>(
               &_Float64Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Float64Metric& a, Float64Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Float64Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float64Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float64Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Float64Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Float64Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Float64Metric& from) {
    Float64Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float64Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Float64Metric";
  }
  protected:
  explicit Float64Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 6,
    kMinFieldNumber = 7,
    kMaxFieldNumber = 8,
    kOffsetFieldNumber = 1,
    kGaugeFieldNumber = 3,
    kCounterFieldNumber = 4,
    kConstantFieldNumber = 5,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 6;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // optional double min = 7;
  bool has_min() const;
  void clear_min() ;
  double min() const;
  void set_min(double value);

  private:
  double _internal_min() const;
  void _internal_set_min(double value);

  public:
  // optional double max = 8;
  bool has_max() const;
  void clear_max() ;
  double max() const;
  void set_max(double value);

  private:
  double _internal_max() const;
  void _internal_set_max(double value);

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Counter counter = 4;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;

  public:
  void clear_counter() ;
  const ::abacus::protobuf::Counter& counter() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Counter* release_counter();
  ::abacus::protobuf::Counter* mutable_counter();
  void set_allocated_counter(::abacus::protobuf::Counter* value);
  void unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* value);
  ::abacus::protobuf::Counter* unsafe_arena_release_counter();

  private:
  const ::abacus::protobuf::Counter& _internal_counter() const;
  ::abacus::protobuf::Counter* _internal_mutable_counter();

  public:
  // .abacus.protobuf.Constant constant = 5;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Float64Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_counter();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 3, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    double min_;
    double max_;
    ::uint32_t offset_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Counter* counter_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Float32Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Float32Metric) */ {
 public:
  inline Float32Metric() : Float32Metric(nullptr) {}
  ~Float32Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Float32Metric(::google::protobuf::internal::ConstantInitialized);

  Float32Metric(const Float32Metric& from);
  Float32Metric(Float32Metric&& from) noexcept
    : Float32Metric() {
    *this = ::std::move(from);
  }

  inline Float32Metric& operator=(const Float32Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float32Metric& operator=(Float32Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float32Metric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kCounter = 4,
    kConstant = 5,
    KIND_NOT_SET = 0,
  };

  static inline const Float32Metric* internal_default_instance() {
    return reinterpret_cast<const Float32Metric*>(
               &_Float32Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Float32Metric& a, Float32Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Float32Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float32Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float32Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Float32Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Float32Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Float32Metric& from) {
    Float32Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float32Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Float32Metric";
  }
  protected:
  explicit Float32Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 6,
    kOffsetFieldNumber = 1,
    kMinFieldNumber = 7,
    kMaxFieldNumber = 8,
    kGaugeFieldNumber = 3,
    kCounterFieldNumber = 4,
    kConstantFieldNumber = 5,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 6;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // optional float min = 7;
  bool has_min() const;
  void clear_min() ;
  float min() const;
  void set_min(float value);

  private:
  float _internal_min() const;
  void _internal_set_min(float value);

  public:
  // optional float max = 8;
  bool has_max() const;
  void clear_max() ;
  float max() const;
  void set_max(float value);

  private:
  float _internal_max() const;
  void _internal_set_max(float value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Counter counter = 4;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;

  public:
  void clear_counter() ;
  const ::abacus::protobuf::Counter& counter() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Counter* release_counter();
  ::abacus::protobuf::Counter* mutable_counter();
  void set_allocated_counter(::abacus::protobuf::Counter* value);
  void unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* value);
  ::abacus::protobuf::Counter* unsafe_arena_release_counter();

  private:
  const ::abacus::protobuf::Counter& _internal_counter() const;
  ::abacus::protobuf::Counter* _internal_mutable_counter();

  public:
  // .abacus.protobuf.Constant constant = 5;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Float32Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_counter();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 3, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::uint32_t offset_;
    float min_;
    float max_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Counter* counter_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class BoolMetric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.BoolMetric) */ {
 public:
  inline BoolMetric() : BoolMetric(nullptr) {}
  ~BoolMetric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoolMetric(::google::protobuf::internal::ConstantInitialized);

  BoolMetric(const BoolMetric& from);
  BoolMetric(BoolMetric&& from) noexcept
    : BoolMetric() {
    *this = ::std::move(from);
  }

  inline BoolMetric& operator=(const BoolMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolMetric& operator=(BoolMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolMetric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kConstant = 4,
    KIND_NOT_SET = 0,
  };

  static inline const BoolMetric* internal_default_instance() {
    return reinterpret_cast<const BoolMetric*>(
               &_BoolMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BoolMetric& a, BoolMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolMetric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolMetric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolMetric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoolMetric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BoolMetric& from) {
    BoolMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolMetric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.BoolMetric";
  }
  protected:
  explicit BoolMetric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 5,
    kOffsetFieldNumber = 1,
    kGaugeFieldNumber = 3,
    kConstantFieldNumber = 4,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 5;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Constant constant = 4;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.BoolMetric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 50, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::uint32_t offset_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Enum8Metric_EnumValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Enum8Metric.EnumValue) */ {
 public:
  inline Enum8Metric_EnumValue() : Enum8Metric_EnumValue(nullptr) {}
  ~Enum8Metric_EnumValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Enum8Metric_EnumValue(::google::protobuf::internal::ConstantInitialized);

  Enum8Metric_EnumValue(const Enum8Metric_EnumValue& from);
  Enum8Metric_EnumValue(Enum8Metric_EnumValue&& from) noexcept
    : Enum8Metric_EnumValue() {
    *this = ::std::move(from);
  }

  inline Enum8Metric_EnumValue& operator=(const Enum8Metric_EnumValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enum8Metric_EnumValue& operator=(Enum8Metric_EnumValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Enum8Metric_EnumValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enum8Metric_EnumValue* internal_default_instance() {
    return reinterpret_cast<const Enum8Metric_EnumValue*>(
               &_Enum8Metric_EnumValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Enum8Metric_EnumValue& a, Enum8Metric_EnumValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Enum8Metric_EnumValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enum8Metric_EnumValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enum8Metric_EnumValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enum8Metric_EnumValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Enum8Metric_EnumValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Enum8Metric_EnumValue& from) {
    Enum8Metric_EnumValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enum8Metric_EnumValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Enum8Metric.EnumValue";
  }
  protected:
  explicit Enum8Metric_EnumValue(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string description = 2;
  bool has_description() const;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Enum8Metric.EnumValue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Enum8Metric_ValuesEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<Enum8Metric_ValuesEntry_DoNotUse, 
    ::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<Enum8Metric_ValuesEntry_DoNotUse, 
    ::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Enum8Metric_ValuesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Enum8Metric_ValuesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Enum8Metric_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Enum8Metric_ValuesEntry_DoNotUse& other);
  static const Enum8Metric_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Enum8Metric_ValuesEntry_DoNotUse*>(&_Enum8Metric_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Enum8Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Enum8Metric) */ {
 public:
  inline Enum8Metric() : Enum8Metric(nullptr) {}
  ~Enum8Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Enum8Metric(::google::protobuf::internal::ConstantInitialized);

  Enum8Metric(const Enum8Metric& from);
  Enum8Metric(Enum8Metric&& from) noexcept
    : Enum8Metric() {
    *this = ::std::move(from);
  }

  inline Enum8Metric& operator=(const Enum8Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enum8Metric& operator=(Enum8Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Enum8Metric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kGauge = 3,
    kConstant = 4,
    KIND_NOT_SET = 0,
  };

  static inline const Enum8Metric* internal_default_instance() {
    return reinterpret_cast<const Enum8Metric*>(
               &_Enum8Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Enum8Metric& a, Enum8Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Enum8Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enum8Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enum8Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enum8Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Enum8Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Enum8Metric& from) {
    Enum8Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enum8Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Enum8Metric";
  }
  protected:
  explicit Enum8Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Enum8Metric_EnumValue EnumValue;

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 6,
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 5,
    kOffsetFieldNumber = 1,
    kGaugeFieldNumber = 3,
    kConstantFieldNumber = 4,
  };
  // map<uint32, .abacus.protobuf.Enum8Metric.EnumValue> values = 6;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>& values() const;
  ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>* mutable_values();

  private:
  const ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>& _internal_values() const;
  ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>* _internal_mutable_values();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string unit = 5;
  bool has_unit() const;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* ptr);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // .abacus.protobuf.Gauge gauge = 3;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::abacus::protobuf::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Gauge* release_gauge();
  ::abacus::protobuf::Gauge* mutable_gauge();
  void set_allocated_gauge(::abacus::protobuf::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* value);
  ::abacus::protobuf::Gauge* unsafe_arena_release_gauge();

  private:
  const ::abacus::protobuf::Gauge& _internal_gauge() const;
  ::abacus::protobuf::Gauge* _internal_mutable_gauge();

  public:
  // .abacus.protobuf.Constant constant = 4;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Enum8Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 4, 51, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<Enum8Metric_ValuesEntry_DoNotUse, ::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        values_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::uint32_t offset_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Gauge* gauge_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class StringMetric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.StringMetric) */ {
 public:
  inline StringMetric() : StringMetric(nullptr) {}
  ~StringMetric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StringMetric(::google::protobuf::internal::ConstantInitialized);

  StringMetric(const StringMetric& from);
  StringMetric(StringMetric&& from) noexcept
    : StringMetric() {
    *this = ::std::move(from);
  }

  inline StringMetric& operator=(const StringMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMetric& operator=(StringMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringMetric& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kConstant = 3,
    KIND_NOT_SET = 0,
  };

  static inline const StringMetric* internal_default_instance() {
    return reinterpret_cast<const StringMetric*>(
               &_StringMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StringMetric& a, StringMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMetric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringMetric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringMetric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StringMetric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StringMetric& from) {
    StringMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMetric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.StringMetric";
  }
  protected:
  explicit StringMetric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kOffsetFieldNumber = 1,
    kConstantFieldNumber = 3,
  };
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // uint32 offset = 1;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // .abacus.protobuf.Constant constant = 3;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;

  public:
  void clear_constant() ;
  const ::abacus::protobuf::Constant& constant() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Constant* release_constant();
  ::abacus::protobuf::Constant* mutable_constant();
  void set_allocated_constant(::abacus::protobuf::Constant* value);
  void unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* value);
  ::abacus::protobuf::Constant* unsafe_arena_release_constant();

  private:
  const ::abacus::protobuf::Constant& _internal_constant() const;
  ::abacus::protobuf::Constant* _internal_mutable_constant();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.StringMetric)
 private:
  class _Internal;
  void set_has_constant();

  inline bool has_kind() const;
  inline void clear_has_kind();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 3, 1, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::uint32_t offset_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::Constant* constant_;
    } kind_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Metric(::google::protobuf::internal::ConstantInitialized);

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kUint64 = 3,
    kInt64 = 4,
    kUint32 = 5,
    kInt32 = 6,
    kFloat64 = 7,
    kFloat32 = 8,
    kBoolean = 9,
    kEnum8 = 10,
    kString = 11,
    TYPE_NOT_SET = 0,
  };

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Metric& from) {
    Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.Metric";
  }
  protected:
  explicit Metric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUint64FieldNumber = 3,
    kInt64FieldNumber = 4,
    kUint32FieldNumber = 5,
    kInt32FieldNumber = 6,
    kFloat64FieldNumber = 7,
    kFloat32FieldNumber = 8,
    kBooleanFieldNumber = 9,
    kEnum8FieldNumber = 10,
    kStringFieldNumber = 11,
  };
  // .abacus.protobuf.UInt64Metric uint64 = 3;
  bool has_uint64() const;
  private:
  bool _internal_has_uint64() const;

  public:
  void clear_uint64() ;
  const ::abacus::protobuf::UInt64Metric& uint64() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::UInt64Metric* release_uint64();
  ::abacus::protobuf::UInt64Metric* mutable_uint64();
  void set_allocated_uint64(::abacus::protobuf::UInt64Metric* value);
  void unsafe_arena_set_allocated_uint64(::abacus::protobuf::UInt64Metric* value);
  ::abacus::protobuf::UInt64Metric* unsafe_arena_release_uint64();

  private:
  const ::abacus::protobuf::UInt64Metric& _internal_uint64() const;
  ::abacus::protobuf::UInt64Metric* _internal_mutable_uint64();

  public:
  // .abacus.protobuf.Int64Metric int64 = 4;
  bool has_int64() const;
  private:
  bool _internal_has_int64() const;

  public:
  void clear_int64() ;
  const ::abacus::protobuf::Int64Metric& int64() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Int64Metric* release_int64();
  ::abacus::protobuf::Int64Metric* mutable_int64();
  void set_allocated_int64(::abacus::protobuf::Int64Metric* value);
  void unsafe_arena_set_allocated_int64(::abacus::protobuf::Int64Metric* value);
  ::abacus::protobuf::Int64Metric* unsafe_arena_release_int64();

  private:
  const ::abacus::protobuf::Int64Metric& _internal_int64() const;
  ::abacus::protobuf::Int64Metric* _internal_mutable_int64();

  public:
  // .abacus.protobuf.UInt32Metric uint32 = 5;
  bool has_uint32() const;
  private:
  bool _internal_has_uint32() const;

  public:
  void clear_uint32() ;
  const ::abacus::protobuf::UInt32Metric& uint32() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::UInt32Metric* release_uint32();
  ::abacus::protobuf::UInt32Metric* mutable_uint32();
  void set_allocated_uint32(::abacus::protobuf::UInt32Metric* value);
  void unsafe_arena_set_allocated_uint32(::abacus::protobuf::UInt32Metric* value);
  ::abacus::protobuf::UInt32Metric* unsafe_arena_release_uint32();

  private:
  const ::abacus::protobuf::UInt32Metric& _internal_uint32() const;
  ::abacus::protobuf::UInt32Metric* _internal_mutable_uint32();

  public:
  // .abacus.protobuf.Int32Metric int32 = 6;
  bool has_int32() const;
  private:
  bool _internal_has_int32() const;

  public:
  void clear_int32() ;
  const ::abacus::protobuf::Int32Metric& int32() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Int32Metric* release_int32();
  ::abacus::protobuf::Int32Metric* mutable_int32();
  void set_allocated_int32(::abacus::protobuf::Int32Metric* value);
  void unsafe_arena_set_allocated_int32(::abacus::protobuf::Int32Metric* value);
  ::abacus::protobuf::Int32Metric* unsafe_arena_release_int32();

  private:
  const ::abacus::protobuf::Int32Metric& _internal_int32() const;
  ::abacus::protobuf::Int32Metric* _internal_mutable_int32();

  public:
  // .abacus.protobuf.Float64Metric float64 = 7;
  bool has_float64() const;
  private:
  bool _internal_has_float64() const;

  public:
  void clear_float64() ;
  const ::abacus::protobuf::Float64Metric& float64() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Float64Metric* release_float64();
  ::abacus::protobuf::Float64Metric* mutable_float64();
  void set_allocated_float64(::abacus::protobuf::Float64Metric* value);
  void unsafe_arena_set_allocated_float64(::abacus::protobuf::Float64Metric* value);
  ::abacus::protobuf::Float64Metric* unsafe_arena_release_float64();

  private:
  const ::abacus::protobuf::Float64Metric& _internal_float64() const;
  ::abacus::protobuf::Float64Metric* _internal_mutable_float64();

  public:
  // .abacus.protobuf.Float32Metric float32 = 8;
  bool has_float32() const;
  private:
  bool _internal_has_float32() const;

  public:
  void clear_float32() ;
  const ::abacus::protobuf::Float32Metric& float32() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Float32Metric* release_float32();
  ::abacus::protobuf::Float32Metric* mutable_float32();
  void set_allocated_float32(::abacus::protobuf::Float32Metric* value);
  void unsafe_arena_set_allocated_float32(::abacus::protobuf::Float32Metric* value);
  ::abacus::protobuf::Float32Metric* unsafe_arena_release_float32();

  private:
  const ::abacus::protobuf::Float32Metric& _internal_float32() const;
  ::abacus::protobuf::Float32Metric* _internal_mutable_float32();

  public:
  // .abacus.protobuf.BoolMetric boolean = 9;
  bool has_boolean() const;
  private:
  bool _internal_has_boolean() const;

  public:
  void clear_boolean() ;
  const ::abacus::protobuf::BoolMetric& boolean() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::BoolMetric* release_boolean();
  ::abacus::protobuf::BoolMetric* mutable_boolean();
  void set_allocated_boolean(::abacus::protobuf::BoolMetric* value);
  void unsafe_arena_set_allocated_boolean(::abacus::protobuf::BoolMetric* value);
  ::abacus::protobuf::BoolMetric* unsafe_arena_release_boolean();

  private:
  const ::abacus::protobuf::BoolMetric& _internal_boolean() const;
  ::abacus::protobuf::BoolMetric* _internal_mutable_boolean();

  public:
  // .abacus.protobuf.Enum8Metric enum8 = 10;
  bool has_enum8() const;
  private:
  bool _internal_has_enum8() const;

  public:
  void clear_enum8() ;
  const ::abacus::protobuf::Enum8Metric& enum8() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::Enum8Metric* release_enum8();
  ::abacus::protobuf::Enum8Metric* mutable_enum8();
  void set_allocated_enum8(::abacus::protobuf::Enum8Metric* value);
  void unsafe_arena_set_allocated_enum8(::abacus::protobuf::Enum8Metric* value);
  ::abacus::protobuf::Enum8Metric* unsafe_arena_release_enum8();

  private:
  const ::abacus::protobuf::Enum8Metric& _internal_enum8() const;
  ::abacus::protobuf::Enum8Metric* _internal_mutable_enum8();

  public:
  // .abacus.protobuf.StringMetric string = 11;
  bool has_string() const;
  private:
  bool _internal_has_string() const;

  public:
  void clear_string() ;
  const ::abacus::protobuf::StringMetric& string() const;
  PROTOBUF_NODISCARD ::abacus::protobuf::StringMetric* release_string();
  ::abacus::protobuf::StringMetric* mutable_string();
  void set_allocated_string(::abacus::protobuf::StringMetric* value);
  void unsafe_arena_set_allocated_string(::abacus::protobuf::StringMetric* value);
  ::abacus::protobuf::StringMetric* unsafe_arena_release_string();

  private:
  const ::abacus::protobuf::StringMetric& _internal_string() const;
  ::abacus::protobuf::StringMetric* _internal_mutable_string();

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:abacus.protobuf.Metric)
 private:
  class _Internal;
  void set_has_uint64();
  void set_has_int64();
  void set_has_uint32();
  void set_has_int32();
  void set_has_float64();
  void set_has_float32();
  void set_has_boolean();
  void set_has_enum8();
  void set_has_string();

  inline bool has_type() const;
  inline void clear_has_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 9, 9, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::abacus::protobuf::UInt64Metric* uint64_;
      ::abacus::protobuf::Int64Metric* int64_;
      ::abacus::protobuf::UInt32Metric* uint32_;
      ::abacus::protobuf::Int32Metric* int32_;
      ::abacus::protobuf::Float64Metric* float64_;
      ::abacus::protobuf::Float32Metric* float32_;
      ::abacus::protobuf::BoolMetric* boolean_;
      ::abacus::protobuf::Enum8Metric* enum8_;
      ::abacus::protobuf::StringMetric* string_;
    } type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};// -------------------------------------------------------------------

class MetricsMetadata_MetricsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<MetricsMetadata_MetricsEntry_DoNotUse, 
    std::string, ::abacus::protobuf::Metric,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<MetricsMetadata_MetricsEntry_DoNotUse, 
    std::string, ::abacus::protobuf::Metric,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MetricsMetadata_MetricsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsMetadata_MetricsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MetricsMetadata_MetricsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MetricsMetadata_MetricsEntry_DoNotUse& other);
  static const MetricsMetadata_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricsMetadata_MetricsEntry_DoNotUse*>(&_MetricsMetadata_MetricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "abacus.protobuf.MetricsMetadata.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MetricsMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abacus.protobuf.MetricsMetadata) */ {
 public:
  inline MetricsMetadata() : MetricsMetadata(nullptr) {}
  ~MetricsMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsMetadata(::google::protobuf::internal::ConstantInitialized);

  MetricsMetadata(const MetricsMetadata& from);
  MetricsMetadata(MetricsMetadata&& from) noexcept
    : MetricsMetadata() {
    *this = ::std::move(from);
  }

  inline MetricsMetadata& operator=(const MetricsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsMetadata& operator=(MetricsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsMetadata* internal_default_instance() {
    return reinterpret_cast<const MetricsMetadata*>(
               &_MetricsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MetricsMetadata& a, MetricsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricsMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetricsMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MetricsMetadata& from) {
    MetricsMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "abacus.protobuf.MetricsMetadata";
  }
  protected:
  explicit MetricsMetadata(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 4,
    kProtocolVersionFieldNumber = 1,
    kEndiannessFieldNumber = 2,
    kSyncValueFieldNumber = 3,
  };
  // map<string, .abacus.protobuf.Metric> metrics = 4;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;

  public:
  void clear_metrics() ;
  const ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>& metrics() const;
  ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>* mutable_metrics();

  private:
  const ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>& _internal_metrics() const;
  ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>* _internal_mutable_metrics();

  public:
  // uint32 protocol_version = 1;
  void clear_protocol_version() ;
  ::uint32_t protocol_version() const;
  void set_protocol_version(::uint32_t value);

  private:
  ::uint32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(::uint32_t value);

  public:
  // .abacus.protobuf.Endianness endianness = 2;
  void clear_endianness() ;
  ::abacus::protobuf::Endianness endianness() const;
  void set_endianness(::abacus::protobuf::Endianness value);

  private:
  ::abacus::protobuf::Endianness _internal_endianness() const;
  void _internal_set_endianness(::abacus::protobuf::Endianness value);

  public:
  // fixed32 sync_value = 3;
  void clear_sync_value() ;
  ::uint32_t sync_value() const;
  void set_sync_value(::uint32_t value);

  private:
  ::uint32_t _internal_sync_value() const;
  void _internal_set_sync_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:abacus.protobuf.MetricsMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 2, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<MetricsMetadata_MetricsEntry_DoNotUse, std::string, ::abacus::protobuf::Metric,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        metrics_;
    ::uint32_t protocol_version_;
    int endianness_;
    ::uint32_t sync_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_abacus_2fprotobuf_2fmetrics_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Gauge

// bool optional = 1;
inline void Gauge::clear_optional() {
  _impl_.optional_ = false;
}
inline bool Gauge::optional() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Gauge.optional)
  return _internal_optional();
}
inline void Gauge::set_optional(bool value) {
  _internal_set_optional(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Gauge.optional)
}
inline bool Gauge::_internal_optional() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.optional_;
}
inline void Gauge::_internal_set_optional(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.optional_ = value;
}

// -------------------------------------------------------------------

// Counter

// bool optional = 1;
inline void Counter::clear_optional() {
  _impl_.optional_ = false;
}
inline bool Counter::optional() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Counter.optional)
  return _internal_optional();
}
inline void Counter::set_optional(bool value) {
  _internal_set_optional(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Counter.optional)
}
inline bool Counter::_internal_optional() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.optional_;
}
inline void Counter::_internal_set_optional(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.optional_ = value;
}

// -------------------------------------------------------------------

// Constant

// -------------------------------------------------------------------

// UInt64Metric

// uint32 offset = 1;
inline void UInt64Metric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t UInt64Metric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.offset)
  return _internal_offset();
}
inline void UInt64Metric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt64Metric.offset)
}
inline ::uint32_t UInt64Metric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void UInt64Metric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void UInt64Metric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UInt64Metric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UInt64Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt64Metric.description)
}
inline std::string* UInt64Metric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt64Metric.description)
  return _s;
}
inline const std::string& UInt64Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void UInt64Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UInt64Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* UInt64Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt64Metric.description)
  return _impl_.description_.Release();
}
inline void UInt64Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.UInt64Metric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool UInt64Metric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool UInt64Metric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void UInt64Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void UInt64Metric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* UInt64Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt64Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& UInt64Metric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& UInt64Metric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* UInt64Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.UInt64Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UInt64Metric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.UInt64Metric.gauge)
}
inline ::abacus::protobuf::Gauge* UInt64Metric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* UInt64Metric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt64Metric.gauge)
  return _msg;
}

// .abacus.protobuf.Counter counter = 4;
inline bool UInt64Metric::has_counter() const {
  return kind_case() == kCounter;
}
inline bool UInt64Metric::_internal_has_counter() const {
  return kind_case() == kCounter;
}
inline void UInt64Metric::set_has_counter() {
  _impl_._oneof_case_[0] = kCounter;
}
inline void UInt64Metric::clear_counter() {
  if (kind_case() == kCounter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.counter_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Counter* UInt64Metric::release_counter() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt64Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Counter& UInt64Metric::_internal_counter() const {
  return kind_case() == kCounter
      ? *_impl_.kind_.counter_
      : reinterpret_cast<::abacus::protobuf::Counter&>(::abacus::protobuf::_Counter_default_instance_);
}
inline const ::abacus::protobuf::Counter& UInt64Metric::counter() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.counter)
  return _internal_counter();
}
inline ::abacus::protobuf::Counter* UInt64Metric::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.UInt64Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UInt64Metric::unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* counter) {
  clear_kind();
  if (counter) {
    set_has_counter();
    _impl_.kind_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.UInt64Metric.counter)
}
inline ::abacus::protobuf::Counter* UInt64Metric::_internal_mutable_counter() {
  if (kind_case() != kCounter) {
    clear_kind();
    set_has_counter();
    _impl_.kind_.counter_ = CreateMaybeMessage< ::abacus::protobuf::Counter >(GetArenaForAllocation());
  }
  return _impl_.kind_.counter_;
}
inline ::abacus::protobuf::Counter* UInt64Metric::mutable_counter() {
  ::abacus::protobuf::Counter* _msg = _internal_mutable_counter();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt64Metric.counter)
  return _msg;
}

// .abacus.protobuf.Constant constant = 5;
inline bool UInt64Metric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool UInt64Metric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void UInt64Metric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void UInt64Metric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* UInt64Metric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt64Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& UInt64Metric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& UInt64Metric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* UInt64Metric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.UInt64Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UInt64Metric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.UInt64Metric.constant)
}
inline ::abacus::protobuf::Constant* UInt64Metric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* UInt64Metric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt64Metric.constant)
  return _msg;
}

// optional string unit = 6;
inline bool UInt64Metric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UInt64Metric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UInt64Metric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UInt64Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt64Metric.unit)
}
inline std::string* UInt64Metric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt64Metric.unit)
  return _s;
}
inline const std::string& UInt64Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void UInt64Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* UInt64Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* UInt64Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt64Metric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UInt64Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.UInt64Metric.unit)
}

// optional uint64 min = 7;
inline bool UInt64Metric::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UInt64Metric::clear_min() {
  _impl_.min_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t UInt64Metric::min() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.min)
  return _internal_min();
}
inline void UInt64Metric::set_min(::uint64_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt64Metric.min)
}
inline ::uint64_t UInt64Metric::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void UInt64Metric::_internal_set_min(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}

// optional uint64 max = 8;
inline bool UInt64Metric::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UInt64Metric::clear_max() {
  _impl_.max_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t UInt64Metric::max() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt64Metric.max)
  return _internal_max();
}
inline void UInt64Metric::set_max(::uint64_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt64Metric.max)
}
inline ::uint64_t UInt64Metric::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void UInt64Metric::_internal_set_max(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}

inline bool UInt64Metric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void UInt64Metric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline UInt64Metric::KindCase UInt64Metric::kind_case() const {
  return UInt64Metric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Int64Metric

// uint32 offset = 1;
inline void Int64Metric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t Int64Metric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.offset)
  return _internal_offset();
}
inline void Int64Metric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int64Metric.offset)
}
inline ::uint32_t Int64Metric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void Int64Metric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void Int64Metric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Int64Metric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Int64Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int64Metric.description)
}
inline std::string* Int64Metric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int64Metric.description)
  return _s;
}
inline const std::string& Int64Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Int64Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Int64Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Int64Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int64Metric.description)
  return _impl_.description_.Release();
}
inline void Int64Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Int64Metric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool Int64Metric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool Int64Metric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void Int64Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void Int64Metric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* Int64Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int64Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& Int64Metric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& Int64Metric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* Int64Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Int64Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Metric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Int64Metric.gauge)
}
inline ::abacus::protobuf::Gauge* Int64Metric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* Int64Metric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int64Metric.gauge)
  return _msg;
}

// .abacus.protobuf.Counter counter = 4;
inline bool Int64Metric::has_counter() const {
  return kind_case() == kCounter;
}
inline bool Int64Metric::_internal_has_counter() const {
  return kind_case() == kCounter;
}
inline void Int64Metric::set_has_counter() {
  _impl_._oneof_case_[0] = kCounter;
}
inline void Int64Metric::clear_counter() {
  if (kind_case() == kCounter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.counter_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Counter* Int64Metric::release_counter() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int64Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Counter& Int64Metric::_internal_counter() const {
  return kind_case() == kCounter
      ? *_impl_.kind_.counter_
      : reinterpret_cast<::abacus::protobuf::Counter&>(::abacus::protobuf::_Counter_default_instance_);
}
inline const ::abacus::protobuf::Counter& Int64Metric::counter() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.counter)
  return _internal_counter();
}
inline ::abacus::protobuf::Counter* Int64Metric::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Int64Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Metric::unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* counter) {
  clear_kind();
  if (counter) {
    set_has_counter();
    _impl_.kind_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Int64Metric.counter)
}
inline ::abacus::protobuf::Counter* Int64Metric::_internal_mutable_counter() {
  if (kind_case() != kCounter) {
    clear_kind();
    set_has_counter();
    _impl_.kind_.counter_ = CreateMaybeMessage< ::abacus::protobuf::Counter >(GetArenaForAllocation());
  }
  return _impl_.kind_.counter_;
}
inline ::abacus::protobuf::Counter* Int64Metric::mutable_counter() {
  ::abacus::protobuf::Counter* _msg = _internal_mutable_counter();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int64Metric.counter)
  return _msg;
}

// .abacus.protobuf.Constant constant = 5;
inline bool Int64Metric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool Int64Metric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void Int64Metric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void Int64Metric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* Int64Metric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int64Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& Int64Metric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& Int64Metric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* Int64Metric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Int64Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Metric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Int64Metric.constant)
}
inline ::abacus::protobuf::Constant* Int64Metric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* Int64Metric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int64Metric.constant)
  return _msg;
}

// optional string unit = 6;
inline bool Int64Metric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Int64Metric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Int64Metric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Int64Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int64Metric.unit)
}
inline std::string* Int64Metric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int64Metric.unit)
  return _s;
}
inline const std::string& Int64Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void Int64Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* Int64Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* Int64Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int64Metric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Int64Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Int64Metric.unit)
}

// optional int64 min = 7;
inline bool Int64Metric::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Int64Metric::clear_min() {
  _impl_.min_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Int64Metric::min() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.min)
  return _internal_min();
}
inline void Int64Metric::set_min(::int64_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int64Metric.min)
}
inline ::int64_t Int64Metric::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void Int64Metric::_internal_set_min(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}

// optional int64 max = 8;
inline bool Int64Metric::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Int64Metric::clear_max() {
  _impl_.max_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Int64Metric::max() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int64Metric.max)
  return _internal_max();
}
inline void Int64Metric::set_max(::int64_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int64Metric.max)
}
inline ::int64_t Int64Metric::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void Int64Metric::_internal_set_max(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}

inline bool Int64Metric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Int64Metric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Int64Metric::KindCase Int64Metric::kind_case() const {
  return Int64Metric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UInt32Metric

// uint32 offset = 1;
inline void UInt32Metric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t UInt32Metric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.offset)
  return _internal_offset();
}
inline void UInt32Metric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt32Metric.offset)
}
inline ::uint32_t UInt32Metric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void UInt32Metric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void UInt32Metric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UInt32Metric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UInt32Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt32Metric.description)
}
inline std::string* UInt32Metric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt32Metric.description)
  return _s;
}
inline const std::string& UInt32Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void UInt32Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UInt32Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* UInt32Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt32Metric.description)
  return _impl_.description_.Release();
}
inline void UInt32Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.UInt32Metric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool UInt32Metric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool UInt32Metric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void UInt32Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void UInt32Metric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* UInt32Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt32Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& UInt32Metric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& UInt32Metric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* UInt32Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.UInt32Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UInt32Metric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.UInt32Metric.gauge)
}
inline ::abacus::protobuf::Gauge* UInt32Metric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* UInt32Metric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt32Metric.gauge)
  return _msg;
}

// .abacus.protobuf.Counter counter = 4;
inline bool UInt32Metric::has_counter() const {
  return kind_case() == kCounter;
}
inline bool UInt32Metric::_internal_has_counter() const {
  return kind_case() == kCounter;
}
inline void UInt32Metric::set_has_counter() {
  _impl_._oneof_case_[0] = kCounter;
}
inline void UInt32Metric::clear_counter() {
  if (kind_case() == kCounter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.counter_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Counter* UInt32Metric::release_counter() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt32Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Counter& UInt32Metric::_internal_counter() const {
  return kind_case() == kCounter
      ? *_impl_.kind_.counter_
      : reinterpret_cast<::abacus::protobuf::Counter&>(::abacus::protobuf::_Counter_default_instance_);
}
inline const ::abacus::protobuf::Counter& UInt32Metric::counter() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.counter)
  return _internal_counter();
}
inline ::abacus::protobuf::Counter* UInt32Metric::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.UInt32Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UInt32Metric::unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* counter) {
  clear_kind();
  if (counter) {
    set_has_counter();
    _impl_.kind_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.UInt32Metric.counter)
}
inline ::abacus::protobuf::Counter* UInt32Metric::_internal_mutable_counter() {
  if (kind_case() != kCounter) {
    clear_kind();
    set_has_counter();
    _impl_.kind_.counter_ = CreateMaybeMessage< ::abacus::protobuf::Counter >(GetArenaForAllocation());
  }
  return _impl_.kind_.counter_;
}
inline ::abacus::protobuf::Counter* UInt32Metric::mutable_counter() {
  ::abacus::protobuf::Counter* _msg = _internal_mutable_counter();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt32Metric.counter)
  return _msg;
}

// .abacus.protobuf.Constant constant = 5;
inline bool UInt32Metric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool UInt32Metric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void UInt32Metric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void UInt32Metric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* UInt32Metric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt32Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& UInt32Metric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& UInt32Metric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* UInt32Metric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.UInt32Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UInt32Metric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.UInt32Metric.constant)
}
inline ::abacus::protobuf::Constant* UInt32Metric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* UInt32Metric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt32Metric.constant)
  return _msg;
}

// optional string unit = 6;
inline bool UInt32Metric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UInt32Metric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UInt32Metric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UInt32Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt32Metric.unit)
}
inline std::string* UInt32Metric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.UInt32Metric.unit)
  return _s;
}
inline const std::string& UInt32Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void UInt32Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* UInt32Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* UInt32Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.UInt32Metric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UInt32Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.UInt32Metric.unit)
}

// optional uint32 min = 7;
inline bool UInt32Metric::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UInt32Metric::clear_min() {
  _impl_.min_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t UInt32Metric::min() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.min)
  return _internal_min();
}
inline void UInt32Metric::set_min(::uint32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt32Metric.min)
}
inline ::uint32_t UInt32Metric::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void UInt32Metric::_internal_set_min(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}

// optional uint32 max = 8;
inline bool UInt32Metric::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UInt32Metric::clear_max() {
  _impl_.max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t UInt32Metric::max() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.UInt32Metric.max)
  return _internal_max();
}
inline void UInt32Metric::set_max(::uint32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.UInt32Metric.max)
}
inline ::uint32_t UInt32Metric::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void UInt32Metric::_internal_set_max(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}

inline bool UInt32Metric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void UInt32Metric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline UInt32Metric::KindCase UInt32Metric::kind_case() const {
  return UInt32Metric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Int32Metric

// uint32 offset = 1;
inline void Int32Metric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t Int32Metric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.offset)
  return _internal_offset();
}
inline void Int32Metric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int32Metric.offset)
}
inline ::uint32_t Int32Metric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void Int32Metric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void Int32Metric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Int32Metric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Int32Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int32Metric.description)
}
inline std::string* Int32Metric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int32Metric.description)
  return _s;
}
inline const std::string& Int32Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Int32Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Int32Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Int32Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int32Metric.description)
  return _impl_.description_.Release();
}
inline void Int32Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Int32Metric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool Int32Metric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool Int32Metric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void Int32Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void Int32Metric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* Int32Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int32Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& Int32Metric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& Int32Metric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* Int32Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Int32Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int32Metric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Int32Metric.gauge)
}
inline ::abacus::protobuf::Gauge* Int32Metric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* Int32Metric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int32Metric.gauge)
  return _msg;
}

// .abacus.protobuf.Counter counter = 4;
inline bool Int32Metric::has_counter() const {
  return kind_case() == kCounter;
}
inline bool Int32Metric::_internal_has_counter() const {
  return kind_case() == kCounter;
}
inline void Int32Metric::set_has_counter() {
  _impl_._oneof_case_[0] = kCounter;
}
inline void Int32Metric::clear_counter() {
  if (kind_case() == kCounter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.counter_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Counter* Int32Metric::release_counter() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int32Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Counter& Int32Metric::_internal_counter() const {
  return kind_case() == kCounter
      ? *_impl_.kind_.counter_
      : reinterpret_cast<::abacus::protobuf::Counter&>(::abacus::protobuf::_Counter_default_instance_);
}
inline const ::abacus::protobuf::Counter& Int32Metric::counter() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.counter)
  return _internal_counter();
}
inline ::abacus::protobuf::Counter* Int32Metric::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Int32Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int32Metric::unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* counter) {
  clear_kind();
  if (counter) {
    set_has_counter();
    _impl_.kind_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Int32Metric.counter)
}
inline ::abacus::protobuf::Counter* Int32Metric::_internal_mutable_counter() {
  if (kind_case() != kCounter) {
    clear_kind();
    set_has_counter();
    _impl_.kind_.counter_ = CreateMaybeMessage< ::abacus::protobuf::Counter >(GetArenaForAllocation());
  }
  return _impl_.kind_.counter_;
}
inline ::abacus::protobuf::Counter* Int32Metric::mutable_counter() {
  ::abacus::protobuf::Counter* _msg = _internal_mutable_counter();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int32Metric.counter)
  return _msg;
}

// .abacus.protobuf.Constant constant = 5;
inline bool Int32Metric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool Int32Metric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void Int32Metric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void Int32Metric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* Int32Metric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int32Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& Int32Metric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& Int32Metric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* Int32Metric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Int32Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int32Metric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Int32Metric.constant)
}
inline ::abacus::protobuf::Constant* Int32Metric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* Int32Metric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int32Metric.constant)
  return _msg;
}

// optional string unit = 6;
inline bool Int32Metric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Int32Metric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Int32Metric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Int32Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int32Metric.unit)
}
inline std::string* Int32Metric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Int32Metric.unit)
  return _s;
}
inline const std::string& Int32Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void Int32Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* Int32Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* Int32Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Int32Metric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Int32Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Int32Metric.unit)
}

// optional int32 min = 7;
inline bool Int32Metric::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Int32Metric::clear_min() {
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Int32Metric::min() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.min)
  return _internal_min();
}
inline void Int32Metric::set_min(::int32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int32Metric.min)
}
inline ::int32_t Int32Metric::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void Int32Metric::_internal_set_min(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}

// optional int32 max = 8;
inline bool Int32Metric::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Int32Metric::clear_max() {
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Int32Metric::max() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Int32Metric.max)
  return _internal_max();
}
inline void Int32Metric::set_max(::int32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Int32Metric.max)
}
inline ::int32_t Int32Metric::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void Int32Metric::_internal_set_max(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}

inline bool Int32Metric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Int32Metric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Int32Metric::KindCase Int32Metric::kind_case() const {
  return Int32Metric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Float64Metric

// uint32 offset = 1;
inline void Float64Metric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t Float64Metric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.offset)
  return _internal_offset();
}
inline void Float64Metric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float64Metric.offset)
}
inline ::uint32_t Float64Metric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void Float64Metric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void Float64Metric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Float64Metric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Float64Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float64Metric.description)
}
inline std::string* Float64Metric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float64Metric.description)
  return _s;
}
inline const std::string& Float64Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Float64Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Float64Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Float64Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float64Metric.description)
  return _impl_.description_.Release();
}
inline void Float64Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Float64Metric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool Float64Metric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool Float64Metric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void Float64Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void Float64Metric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* Float64Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float64Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& Float64Metric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& Float64Metric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* Float64Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Float64Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Float64Metric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Float64Metric.gauge)
}
inline ::abacus::protobuf::Gauge* Float64Metric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* Float64Metric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float64Metric.gauge)
  return _msg;
}

// .abacus.protobuf.Counter counter = 4;
inline bool Float64Metric::has_counter() const {
  return kind_case() == kCounter;
}
inline bool Float64Metric::_internal_has_counter() const {
  return kind_case() == kCounter;
}
inline void Float64Metric::set_has_counter() {
  _impl_._oneof_case_[0] = kCounter;
}
inline void Float64Metric::clear_counter() {
  if (kind_case() == kCounter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.counter_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Counter* Float64Metric::release_counter() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float64Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Counter& Float64Metric::_internal_counter() const {
  return kind_case() == kCounter
      ? *_impl_.kind_.counter_
      : reinterpret_cast<::abacus::protobuf::Counter&>(::abacus::protobuf::_Counter_default_instance_);
}
inline const ::abacus::protobuf::Counter& Float64Metric::counter() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.counter)
  return _internal_counter();
}
inline ::abacus::protobuf::Counter* Float64Metric::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Float64Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Float64Metric::unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* counter) {
  clear_kind();
  if (counter) {
    set_has_counter();
    _impl_.kind_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Float64Metric.counter)
}
inline ::abacus::protobuf::Counter* Float64Metric::_internal_mutable_counter() {
  if (kind_case() != kCounter) {
    clear_kind();
    set_has_counter();
    _impl_.kind_.counter_ = CreateMaybeMessage< ::abacus::protobuf::Counter >(GetArenaForAllocation());
  }
  return _impl_.kind_.counter_;
}
inline ::abacus::protobuf::Counter* Float64Metric::mutable_counter() {
  ::abacus::protobuf::Counter* _msg = _internal_mutable_counter();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float64Metric.counter)
  return _msg;
}

// .abacus.protobuf.Constant constant = 5;
inline bool Float64Metric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool Float64Metric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void Float64Metric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void Float64Metric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* Float64Metric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float64Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& Float64Metric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& Float64Metric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* Float64Metric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Float64Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Float64Metric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Float64Metric.constant)
}
inline ::abacus::protobuf::Constant* Float64Metric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* Float64Metric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float64Metric.constant)
  return _msg;
}

// optional string unit = 6;
inline bool Float64Metric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Float64Metric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Float64Metric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Float64Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float64Metric.unit)
}
inline std::string* Float64Metric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float64Metric.unit)
  return _s;
}
inline const std::string& Float64Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void Float64Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* Float64Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* Float64Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float64Metric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Float64Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Float64Metric.unit)
}

// optional double min = 7;
inline bool Float64Metric::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Float64Metric::clear_min() {
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Float64Metric::min() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.min)
  return _internal_min();
}
inline void Float64Metric::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float64Metric.min)
}
inline double Float64Metric::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void Float64Metric::_internal_set_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}

// optional double max = 8;
inline bool Float64Metric::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Float64Metric::clear_max() {
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Float64Metric::max() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float64Metric.max)
  return _internal_max();
}
inline void Float64Metric::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float64Metric.max)
}
inline double Float64Metric::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void Float64Metric::_internal_set_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}

inline bool Float64Metric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Float64Metric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Float64Metric::KindCase Float64Metric::kind_case() const {
  return Float64Metric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Float32Metric

// uint32 offset = 1;
inline void Float32Metric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t Float32Metric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.offset)
  return _internal_offset();
}
inline void Float32Metric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float32Metric.offset)
}
inline ::uint32_t Float32Metric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void Float32Metric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void Float32Metric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Float32Metric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Float32Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float32Metric.description)
}
inline std::string* Float32Metric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float32Metric.description)
  return _s;
}
inline const std::string& Float32Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Float32Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Float32Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Float32Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float32Metric.description)
  return _impl_.description_.Release();
}
inline void Float32Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Float32Metric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool Float32Metric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool Float32Metric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void Float32Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void Float32Metric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* Float32Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float32Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& Float32Metric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& Float32Metric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* Float32Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Float32Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Float32Metric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Float32Metric.gauge)
}
inline ::abacus::protobuf::Gauge* Float32Metric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* Float32Metric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float32Metric.gauge)
  return _msg;
}

// .abacus.protobuf.Counter counter = 4;
inline bool Float32Metric::has_counter() const {
  return kind_case() == kCounter;
}
inline bool Float32Metric::_internal_has_counter() const {
  return kind_case() == kCounter;
}
inline void Float32Metric::set_has_counter() {
  _impl_._oneof_case_[0] = kCounter;
}
inline void Float32Metric::clear_counter() {
  if (kind_case() == kCounter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.counter_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Counter* Float32Metric::release_counter() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float32Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Counter& Float32Metric::_internal_counter() const {
  return kind_case() == kCounter
      ? *_impl_.kind_.counter_
      : reinterpret_cast<::abacus::protobuf::Counter&>(::abacus::protobuf::_Counter_default_instance_);
}
inline const ::abacus::protobuf::Counter& Float32Metric::counter() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.counter)
  return _internal_counter();
}
inline ::abacus::protobuf::Counter* Float32Metric::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Float32Metric.counter)
  if (kind_case() == kCounter) {
    clear_has_kind();
    ::abacus::protobuf::Counter* temp = _impl_.kind_.counter_;
    _impl_.kind_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Float32Metric::unsafe_arena_set_allocated_counter(::abacus::protobuf::Counter* counter) {
  clear_kind();
  if (counter) {
    set_has_counter();
    _impl_.kind_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Float32Metric.counter)
}
inline ::abacus::protobuf::Counter* Float32Metric::_internal_mutable_counter() {
  if (kind_case() != kCounter) {
    clear_kind();
    set_has_counter();
    _impl_.kind_.counter_ = CreateMaybeMessage< ::abacus::protobuf::Counter >(GetArenaForAllocation());
  }
  return _impl_.kind_.counter_;
}
inline ::abacus::protobuf::Counter* Float32Metric::mutable_counter() {
  ::abacus::protobuf::Counter* _msg = _internal_mutable_counter();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float32Metric.counter)
  return _msg;
}

// .abacus.protobuf.Constant constant = 5;
inline bool Float32Metric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool Float32Metric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void Float32Metric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void Float32Metric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* Float32Metric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float32Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& Float32Metric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& Float32Metric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* Float32Metric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Float32Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Float32Metric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Float32Metric.constant)
}
inline ::abacus::protobuf::Constant* Float32Metric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* Float32Metric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float32Metric.constant)
  return _msg;
}

// optional string unit = 6;
inline bool Float32Metric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Float32Metric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Float32Metric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Float32Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float32Metric.unit)
}
inline std::string* Float32Metric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Float32Metric.unit)
  return _s;
}
inline const std::string& Float32Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void Float32Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* Float32Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* Float32Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Float32Metric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Float32Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Float32Metric.unit)
}

// optional float min = 7;
inline bool Float32Metric::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Float32Metric::clear_min() {
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Float32Metric::min() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.min)
  return _internal_min();
}
inline void Float32Metric::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float32Metric.min)
}
inline float Float32Metric::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void Float32Metric::_internal_set_min(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}

// optional float max = 8;
inline bool Float32Metric::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Float32Metric::clear_max() {
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Float32Metric::max() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Float32Metric.max)
  return _internal_max();
}
inline void Float32Metric::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Float32Metric.max)
}
inline float Float32Metric::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void Float32Metric::_internal_set_max(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}

inline bool Float32Metric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Float32Metric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Float32Metric::KindCase Float32Metric::kind_case() const {
  return Float32Metric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BoolMetric

// uint32 offset = 1;
inline void BoolMetric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t BoolMetric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.BoolMetric.offset)
  return _internal_offset();
}
inline void BoolMetric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.BoolMetric.offset)
}
inline ::uint32_t BoolMetric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void BoolMetric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void BoolMetric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& BoolMetric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.BoolMetric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BoolMetric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.BoolMetric.description)
}
inline std::string* BoolMetric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.BoolMetric.description)
  return _s;
}
inline const std::string& BoolMetric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void BoolMetric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* BoolMetric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* BoolMetric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.BoolMetric.description)
  return _impl_.description_.Release();
}
inline void BoolMetric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.BoolMetric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool BoolMetric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool BoolMetric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void BoolMetric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void BoolMetric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* BoolMetric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.BoolMetric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& BoolMetric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& BoolMetric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.BoolMetric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* BoolMetric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.BoolMetric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BoolMetric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.BoolMetric.gauge)
}
inline ::abacus::protobuf::Gauge* BoolMetric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* BoolMetric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.BoolMetric.gauge)
  return _msg;
}

// .abacus.protobuf.Constant constant = 4;
inline bool BoolMetric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool BoolMetric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void BoolMetric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void BoolMetric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* BoolMetric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.BoolMetric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& BoolMetric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& BoolMetric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.BoolMetric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* BoolMetric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.BoolMetric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BoolMetric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.BoolMetric.constant)
}
inline ::abacus::protobuf::Constant* BoolMetric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* BoolMetric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.BoolMetric.constant)
  return _msg;
}

// optional string unit = 5;
inline bool BoolMetric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BoolMetric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BoolMetric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.BoolMetric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BoolMetric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.BoolMetric.unit)
}
inline std::string* BoolMetric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.BoolMetric.unit)
  return _s;
}
inline const std::string& BoolMetric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void BoolMetric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* BoolMetric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* BoolMetric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.BoolMetric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BoolMetric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.BoolMetric.unit)
}

inline bool BoolMetric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void BoolMetric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline BoolMetric::KindCase BoolMetric::kind_case() const {
  return BoolMetric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Enum8Metric_EnumValue

// string name = 1;
inline void Enum8Metric_EnumValue::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Enum8Metric_EnumValue::name() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Enum8Metric.EnumValue.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Enum8Metric_EnumValue::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Enum8Metric.EnumValue.name)
}
inline std::string* Enum8Metric_EnumValue::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Enum8Metric.EnumValue.name)
  return _s;
}
inline const std::string& Enum8Metric_EnumValue::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Enum8Metric_EnumValue::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Enum8Metric_EnumValue::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Enum8Metric_EnumValue::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Enum8Metric.EnumValue.name)
  return _impl_.name_.Release();
}
inline void Enum8Metric_EnumValue::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Enum8Metric.EnumValue.name)
}

// optional string description = 2;
inline bool Enum8Metric_EnumValue::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Enum8Metric_EnumValue::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Enum8Metric_EnumValue::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Enum8Metric.EnumValue.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Enum8Metric_EnumValue::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Enum8Metric.EnumValue.description)
}
inline std::string* Enum8Metric_EnumValue::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Enum8Metric.EnumValue.description)
  return _s;
}
inline const std::string& Enum8Metric_EnumValue::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Enum8Metric_EnumValue::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Enum8Metric_EnumValue::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Enum8Metric_EnumValue::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Enum8Metric.EnumValue.description)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.description_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Enum8Metric_EnumValue::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Enum8Metric.EnumValue.description)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Enum8Metric

// uint32 offset = 1;
inline void Enum8Metric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t Enum8Metric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Enum8Metric.offset)
  return _internal_offset();
}
inline void Enum8Metric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.Enum8Metric.offset)
}
inline ::uint32_t Enum8Metric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void Enum8Metric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void Enum8Metric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Enum8Metric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Enum8Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Enum8Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Enum8Metric.description)
}
inline std::string* Enum8Metric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Enum8Metric.description)
  return _s;
}
inline const std::string& Enum8Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Enum8Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Enum8Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Enum8Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Enum8Metric.description)
  return _impl_.description_.Release();
}
inline void Enum8Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Enum8Metric.description)
}

// .abacus.protobuf.Gauge gauge = 3;
inline bool Enum8Metric::has_gauge() const {
  return kind_case() == kGauge;
}
inline bool Enum8Metric::_internal_has_gauge() const {
  return kind_case() == kGauge;
}
inline void Enum8Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void Enum8Metric::clear_gauge() {
  if (kind_case() == kGauge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.gauge_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Gauge* Enum8Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Enum8Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Gauge& Enum8Metric::_internal_gauge() const {
  return kind_case() == kGauge
      ? *_impl_.kind_.gauge_
      : reinterpret_cast<::abacus::protobuf::Gauge&>(::abacus::protobuf::_Gauge_default_instance_);
}
inline const ::abacus::protobuf::Gauge& Enum8Metric::gauge() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Enum8Metric.gauge)
  return _internal_gauge();
}
inline ::abacus::protobuf::Gauge* Enum8Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Enum8Metric.gauge)
  if (kind_case() == kGauge) {
    clear_has_kind();
    ::abacus::protobuf::Gauge* temp = _impl_.kind_.gauge_;
    _impl_.kind_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Enum8Metric::unsafe_arena_set_allocated_gauge(::abacus::protobuf::Gauge* gauge) {
  clear_kind();
  if (gauge) {
    set_has_gauge();
    _impl_.kind_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Enum8Metric.gauge)
}
inline ::abacus::protobuf::Gauge* Enum8Metric::_internal_mutable_gauge() {
  if (kind_case() != kGauge) {
    clear_kind();
    set_has_gauge();
    _impl_.kind_.gauge_ = CreateMaybeMessage< ::abacus::protobuf::Gauge >(GetArenaForAllocation());
  }
  return _impl_.kind_.gauge_;
}
inline ::abacus::protobuf::Gauge* Enum8Metric::mutable_gauge() {
  ::abacus::protobuf::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Enum8Metric.gauge)
  return _msg;
}

// .abacus.protobuf.Constant constant = 4;
inline bool Enum8Metric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool Enum8Metric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void Enum8Metric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void Enum8Metric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* Enum8Metric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Enum8Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& Enum8Metric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& Enum8Metric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Enum8Metric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* Enum8Metric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Enum8Metric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Enum8Metric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Enum8Metric.constant)
}
inline ::abacus::protobuf::Constant* Enum8Metric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* Enum8Metric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Enum8Metric.constant)
  return _msg;
}

// optional string unit = 5;
inline bool Enum8Metric::has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Enum8Metric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Enum8Metric::unit() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Enum8Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Enum8Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.Enum8Metric.unit)
}
inline std::string* Enum8Metric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Enum8Metric.unit)
  return _s;
}
inline const std::string& Enum8Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void Enum8Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* Enum8Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_.Mutable( GetArenaForAllocation());
}
inline std::string* Enum8Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.Enum8Metric.unit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unit_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Enum8Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.Enum8Metric.unit)
}

// map<uint32, .abacus.protobuf.Enum8Metric.EnumValue> values = 6;
inline int Enum8Metric::_internal_values_size() const {
  return _internal_values().size();
}
inline int Enum8Metric::values_size() const {
  return _internal_values_size();
}
inline void Enum8Metric::clear_values() {
  _impl_.values_.Clear();
}
inline const ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>& Enum8Metric::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_.GetMap();
}
inline const ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>& Enum8Metric::values() const {
  // @@protoc_insertion_point(field_map:abacus.protobuf.Enum8Metric.values)
  return _internal_values();
}
inline ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>* Enum8Metric::_internal_mutable_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.values_.MutableMap();
}
inline ::google::protobuf::Map<::uint32_t, ::abacus::protobuf::Enum8Metric_EnumValue>* Enum8Metric::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:abacus.protobuf.Enum8Metric.values)
  return _internal_mutable_values();
}

inline bool Enum8Metric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Enum8Metric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Enum8Metric::KindCase Enum8Metric::kind_case() const {
  return Enum8Metric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringMetric

// uint32 offset = 1;
inline void StringMetric::clear_offset() {
  _impl_.offset_ = 0u;
}
inline ::uint32_t StringMetric::offset() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.StringMetric.offset)
  return _internal_offset();
}
inline void StringMetric::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.StringMetric.offset)
}
inline ::uint32_t StringMetric::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void StringMetric::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// string description = 2;
inline void StringMetric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& StringMetric::description() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.StringMetric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StringMetric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:abacus.protobuf.StringMetric.description)
}
inline std::string* StringMetric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.StringMetric.description)
  return _s;
}
inline const std::string& StringMetric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void StringMetric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* StringMetric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* StringMetric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:abacus.protobuf.StringMetric.description)
  return _impl_.description_.Release();
}
inline void StringMetric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:abacus.protobuf.StringMetric.description)
}

// .abacus.protobuf.Constant constant = 3;
inline bool StringMetric::has_constant() const {
  return kind_case() == kConstant;
}
inline bool StringMetric::_internal_has_constant() const {
  return kind_case() == kConstant;
}
inline void StringMetric::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void StringMetric::clear_constant() {
  if (kind_case() == kConstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.constant_;
    }
    clear_has_kind();
  }
}
inline ::abacus::protobuf::Constant* StringMetric::release_constant() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.StringMetric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Constant& StringMetric::_internal_constant() const {
  return kind_case() == kConstant
      ? *_impl_.kind_.constant_
      : reinterpret_cast<::abacus::protobuf::Constant&>(::abacus::protobuf::_Constant_default_instance_);
}
inline const ::abacus::protobuf::Constant& StringMetric::constant() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.StringMetric.constant)
  return _internal_constant();
}
inline ::abacus::protobuf::Constant* StringMetric::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.StringMetric.constant)
  if (kind_case() == kConstant) {
    clear_has_kind();
    ::abacus::protobuf::Constant* temp = _impl_.kind_.constant_;
    _impl_.kind_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StringMetric::unsafe_arena_set_allocated_constant(::abacus::protobuf::Constant* constant) {
  clear_kind();
  if (constant) {
    set_has_constant();
    _impl_.kind_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.StringMetric.constant)
}
inline ::abacus::protobuf::Constant* StringMetric::_internal_mutable_constant() {
  if (kind_case() != kConstant) {
    clear_kind();
    set_has_constant();
    _impl_.kind_.constant_ = CreateMaybeMessage< ::abacus::protobuf::Constant >(GetArenaForAllocation());
  }
  return _impl_.kind_.constant_;
}
inline ::abacus::protobuf::Constant* StringMetric::mutable_constant() {
  ::abacus::protobuf::Constant* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.StringMetric.constant)
  return _msg;
}

inline bool StringMetric::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void StringMetric::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline StringMetric::KindCase StringMetric::kind_case() const {
  return StringMetric::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Metric

// .abacus.protobuf.UInt64Metric uint64 = 3;
inline bool Metric::has_uint64() const {
  return type_case() == kUint64;
}
inline bool Metric::_internal_has_uint64() const {
  return type_case() == kUint64;
}
inline void Metric::set_has_uint64() {
  _impl_._oneof_case_[0] = kUint64;
}
inline void Metric::clear_uint64() {
  if (type_case() == kUint64) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.uint64_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::UInt64Metric* Metric::release_uint64() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.uint64)
  if (type_case() == kUint64) {
    clear_has_type();
    ::abacus::protobuf::UInt64Metric* temp = _impl_.type_.uint64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::UInt64Metric& Metric::_internal_uint64() const {
  return type_case() == kUint64
      ? *_impl_.type_.uint64_
      : reinterpret_cast<::abacus::protobuf::UInt64Metric&>(::abacus::protobuf::_UInt64Metric_default_instance_);
}
inline const ::abacus::protobuf::UInt64Metric& Metric::uint64() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.uint64)
  return _internal_uint64();
}
inline ::abacus::protobuf::UInt64Metric* Metric::unsafe_arena_release_uint64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.uint64)
  if (type_case() == kUint64) {
    clear_has_type();
    ::abacus::protobuf::UInt64Metric* temp = _impl_.type_.uint64_;
    _impl_.type_.uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_uint64(::abacus::protobuf::UInt64Metric* uint64) {
  clear_type();
  if (uint64) {
    set_has_uint64();
    _impl_.type_.uint64_ = uint64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.uint64)
}
inline ::abacus::protobuf::UInt64Metric* Metric::_internal_mutable_uint64() {
  if (type_case() != kUint64) {
    clear_type();
    set_has_uint64();
    _impl_.type_.uint64_ = CreateMaybeMessage< ::abacus::protobuf::UInt64Metric >(GetArenaForAllocation());
  }
  return _impl_.type_.uint64_;
}
inline ::abacus::protobuf::UInt64Metric* Metric::mutable_uint64() {
  ::abacus::protobuf::UInt64Metric* _msg = _internal_mutable_uint64();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.uint64)
  return _msg;
}

// .abacus.protobuf.Int64Metric int64 = 4;
inline bool Metric::has_int64() const {
  return type_case() == kInt64;
}
inline bool Metric::_internal_has_int64() const {
  return type_case() == kInt64;
}
inline void Metric::set_has_int64() {
  _impl_._oneof_case_[0] = kInt64;
}
inline void Metric::clear_int64() {
  if (type_case() == kInt64) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.int64_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::Int64Metric* Metric::release_int64() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.int64)
  if (type_case() == kInt64) {
    clear_has_type();
    ::abacus::protobuf::Int64Metric* temp = _impl_.type_.int64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Int64Metric& Metric::_internal_int64() const {
  return type_case() == kInt64
      ? *_impl_.type_.int64_
      : reinterpret_cast<::abacus::protobuf::Int64Metric&>(::abacus::protobuf::_Int64Metric_default_instance_);
}
inline const ::abacus::protobuf::Int64Metric& Metric::int64() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.int64)
  return _internal_int64();
}
inline ::abacus::protobuf::Int64Metric* Metric::unsafe_arena_release_int64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.int64)
  if (type_case() == kInt64) {
    clear_has_type();
    ::abacus::protobuf::Int64Metric* temp = _impl_.type_.int64_;
    _impl_.type_.int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int64(::abacus::protobuf::Int64Metric* int64) {
  clear_type();
  if (int64) {
    set_has_int64();
    _impl_.type_.int64_ = int64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.int64)
}
inline ::abacus::protobuf::Int64Metric* Metric::_internal_mutable_int64() {
  if (type_case() != kInt64) {
    clear_type();
    set_has_int64();
    _impl_.type_.int64_ = CreateMaybeMessage< ::abacus::protobuf::Int64Metric >(GetArenaForAllocation());
  }
  return _impl_.type_.int64_;
}
inline ::abacus::protobuf::Int64Metric* Metric::mutable_int64() {
  ::abacus::protobuf::Int64Metric* _msg = _internal_mutable_int64();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.int64)
  return _msg;
}

// .abacus.protobuf.UInt32Metric uint32 = 5;
inline bool Metric::has_uint32() const {
  return type_case() == kUint32;
}
inline bool Metric::_internal_has_uint32() const {
  return type_case() == kUint32;
}
inline void Metric::set_has_uint32() {
  _impl_._oneof_case_[0] = kUint32;
}
inline void Metric::clear_uint32() {
  if (type_case() == kUint32) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.uint32_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::UInt32Metric* Metric::release_uint32() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.uint32)
  if (type_case() == kUint32) {
    clear_has_type();
    ::abacus::protobuf::UInt32Metric* temp = _impl_.type_.uint32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::UInt32Metric& Metric::_internal_uint32() const {
  return type_case() == kUint32
      ? *_impl_.type_.uint32_
      : reinterpret_cast<::abacus::protobuf::UInt32Metric&>(::abacus::protobuf::_UInt32Metric_default_instance_);
}
inline const ::abacus::protobuf::UInt32Metric& Metric::uint32() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.uint32)
  return _internal_uint32();
}
inline ::abacus::protobuf::UInt32Metric* Metric::unsafe_arena_release_uint32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.uint32)
  if (type_case() == kUint32) {
    clear_has_type();
    ::abacus::protobuf::UInt32Metric* temp = _impl_.type_.uint32_;
    _impl_.type_.uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_uint32(::abacus::protobuf::UInt32Metric* uint32) {
  clear_type();
  if (uint32) {
    set_has_uint32();
    _impl_.type_.uint32_ = uint32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.uint32)
}
inline ::abacus::protobuf::UInt32Metric* Metric::_internal_mutable_uint32() {
  if (type_case() != kUint32) {
    clear_type();
    set_has_uint32();
    _impl_.type_.uint32_ = CreateMaybeMessage< ::abacus::protobuf::UInt32Metric >(GetArenaForAllocation());
  }
  return _impl_.type_.uint32_;
}
inline ::abacus::protobuf::UInt32Metric* Metric::mutable_uint32() {
  ::abacus::protobuf::UInt32Metric* _msg = _internal_mutable_uint32();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.uint32)
  return _msg;
}

// .abacus.protobuf.Int32Metric int32 = 6;
inline bool Metric::has_int32() const {
  return type_case() == kInt32;
}
inline bool Metric::_internal_has_int32() const {
  return type_case() == kInt32;
}
inline void Metric::set_has_int32() {
  _impl_._oneof_case_[0] = kInt32;
}
inline void Metric::clear_int32() {
  if (type_case() == kInt32) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.int32_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::Int32Metric* Metric::release_int32() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.int32)
  if (type_case() == kInt32) {
    clear_has_type();
    ::abacus::protobuf::Int32Metric* temp = _impl_.type_.int32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.int32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Int32Metric& Metric::_internal_int32() const {
  return type_case() == kInt32
      ? *_impl_.type_.int32_
      : reinterpret_cast<::abacus::protobuf::Int32Metric&>(::abacus::protobuf::_Int32Metric_default_instance_);
}
inline const ::abacus::protobuf::Int32Metric& Metric::int32() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.int32)
  return _internal_int32();
}
inline ::abacus::protobuf::Int32Metric* Metric::unsafe_arena_release_int32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.int32)
  if (type_case() == kInt32) {
    clear_has_type();
    ::abacus::protobuf::Int32Metric* temp = _impl_.type_.int32_;
    _impl_.type_.int32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int32(::abacus::protobuf::Int32Metric* int32) {
  clear_type();
  if (int32) {
    set_has_int32();
    _impl_.type_.int32_ = int32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.int32)
}
inline ::abacus::protobuf::Int32Metric* Metric::_internal_mutable_int32() {
  if (type_case() != kInt32) {
    clear_type();
    set_has_int32();
    _impl_.type_.int32_ = CreateMaybeMessage< ::abacus::protobuf::Int32Metric >(GetArenaForAllocation());
  }
  return _impl_.type_.int32_;
}
inline ::abacus::protobuf::Int32Metric* Metric::mutable_int32() {
  ::abacus::protobuf::Int32Metric* _msg = _internal_mutable_int32();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.int32)
  return _msg;
}

// .abacus.protobuf.Float64Metric float64 = 7;
inline bool Metric::has_float64() const {
  return type_case() == kFloat64;
}
inline bool Metric::_internal_has_float64() const {
  return type_case() == kFloat64;
}
inline void Metric::set_has_float64() {
  _impl_._oneof_case_[0] = kFloat64;
}
inline void Metric::clear_float64() {
  if (type_case() == kFloat64) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.float64_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::Float64Metric* Metric::release_float64() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.float64)
  if (type_case() == kFloat64) {
    clear_has_type();
    ::abacus::protobuf::Float64Metric* temp = _impl_.type_.float64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.float64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Float64Metric& Metric::_internal_float64() const {
  return type_case() == kFloat64
      ? *_impl_.type_.float64_
      : reinterpret_cast<::abacus::protobuf::Float64Metric&>(::abacus::protobuf::_Float64Metric_default_instance_);
}
inline const ::abacus::protobuf::Float64Metric& Metric::float64() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.float64)
  return _internal_float64();
}
inline ::abacus::protobuf::Float64Metric* Metric::unsafe_arena_release_float64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.float64)
  if (type_case() == kFloat64) {
    clear_has_type();
    ::abacus::protobuf::Float64Metric* temp = _impl_.type_.float64_;
    _impl_.type_.float64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_float64(::abacus::protobuf::Float64Metric* float64) {
  clear_type();
  if (float64) {
    set_has_float64();
    _impl_.type_.float64_ = float64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.float64)
}
inline ::abacus::protobuf::Float64Metric* Metric::_internal_mutable_float64() {
  if (type_case() != kFloat64) {
    clear_type();
    set_has_float64();
    _impl_.type_.float64_ = CreateMaybeMessage< ::abacus::protobuf::Float64Metric >(GetArenaForAllocation());
  }
  return _impl_.type_.float64_;
}
inline ::abacus::protobuf::Float64Metric* Metric::mutable_float64() {
  ::abacus::protobuf::Float64Metric* _msg = _internal_mutable_float64();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.float64)
  return _msg;
}

// .abacus.protobuf.Float32Metric float32 = 8;
inline bool Metric::has_float32() const {
  return type_case() == kFloat32;
}
inline bool Metric::_internal_has_float32() const {
  return type_case() == kFloat32;
}
inline void Metric::set_has_float32() {
  _impl_._oneof_case_[0] = kFloat32;
}
inline void Metric::clear_float32() {
  if (type_case() == kFloat32) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.float32_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::Float32Metric* Metric::release_float32() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.float32)
  if (type_case() == kFloat32) {
    clear_has_type();
    ::abacus::protobuf::Float32Metric* temp = _impl_.type_.float32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.float32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Float32Metric& Metric::_internal_float32() const {
  return type_case() == kFloat32
      ? *_impl_.type_.float32_
      : reinterpret_cast<::abacus::protobuf::Float32Metric&>(::abacus::protobuf::_Float32Metric_default_instance_);
}
inline const ::abacus::protobuf::Float32Metric& Metric::float32() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.float32)
  return _internal_float32();
}
inline ::abacus::protobuf::Float32Metric* Metric::unsafe_arena_release_float32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.float32)
  if (type_case() == kFloat32) {
    clear_has_type();
    ::abacus::protobuf::Float32Metric* temp = _impl_.type_.float32_;
    _impl_.type_.float32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_float32(::abacus::protobuf::Float32Metric* float32) {
  clear_type();
  if (float32) {
    set_has_float32();
    _impl_.type_.float32_ = float32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.float32)
}
inline ::abacus::protobuf::Float32Metric* Metric::_internal_mutable_float32() {
  if (type_case() != kFloat32) {
    clear_type();
    set_has_float32();
    _impl_.type_.float32_ = CreateMaybeMessage< ::abacus::protobuf::Float32Metric >(GetArenaForAllocation());
  }
  return _impl_.type_.float32_;
}
inline ::abacus::protobuf::Float32Metric* Metric::mutable_float32() {
  ::abacus::protobuf::Float32Metric* _msg = _internal_mutable_float32();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.float32)
  return _msg;
}

// .abacus.protobuf.BoolMetric boolean = 9;
inline bool Metric::has_boolean() const {
  return type_case() == kBoolean;
}
inline bool Metric::_internal_has_boolean() const {
  return type_case() == kBoolean;
}
inline void Metric::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void Metric::clear_boolean() {
  if (type_case() == kBoolean) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.boolean_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::BoolMetric* Metric::release_boolean() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.boolean)
  if (type_case() == kBoolean) {
    clear_has_type();
    ::abacus::protobuf::BoolMetric* temp = _impl_.type_.boolean_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::BoolMetric& Metric::_internal_boolean() const {
  return type_case() == kBoolean
      ? *_impl_.type_.boolean_
      : reinterpret_cast<::abacus::protobuf::BoolMetric&>(::abacus::protobuf::_BoolMetric_default_instance_);
}
inline const ::abacus::protobuf::BoolMetric& Metric::boolean() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.boolean)
  return _internal_boolean();
}
inline ::abacus::protobuf::BoolMetric* Metric::unsafe_arena_release_boolean() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.boolean)
  if (type_case() == kBoolean) {
    clear_has_type();
    ::abacus::protobuf::BoolMetric* temp = _impl_.type_.boolean_;
    _impl_.type_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_boolean(::abacus::protobuf::BoolMetric* boolean) {
  clear_type();
  if (boolean) {
    set_has_boolean();
    _impl_.type_.boolean_ = boolean;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.boolean)
}
inline ::abacus::protobuf::BoolMetric* Metric::_internal_mutable_boolean() {
  if (type_case() != kBoolean) {
    clear_type();
    set_has_boolean();
    _impl_.type_.boolean_ = CreateMaybeMessage< ::abacus::protobuf::BoolMetric >(GetArenaForAllocation());
  }
  return _impl_.type_.boolean_;
}
inline ::abacus::protobuf::BoolMetric* Metric::mutable_boolean() {
  ::abacus::protobuf::BoolMetric* _msg = _internal_mutable_boolean();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.boolean)
  return _msg;
}

// .abacus.protobuf.Enum8Metric enum8 = 10;
inline bool Metric::has_enum8() const {
  return type_case() == kEnum8;
}
inline bool Metric::_internal_has_enum8() const {
  return type_case() == kEnum8;
}
inline void Metric::set_has_enum8() {
  _impl_._oneof_case_[0] = kEnum8;
}
inline void Metric::clear_enum8() {
  if (type_case() == kEnum8) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.enum8_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::Enum8Metric* Metric::release_enum8() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.enum8)
  if (type_case() == kEnum8) {
    clear_has_type();
    ::abacus::protobuf::Enum8Metric* temp = _impl_.type_.enum8_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.enum8_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::Enum8Metric& Metric::_internal_enum8() const {
  return type_case() == kEnum8
      ? *_impl_.type_.enum8_
      : reinterpret_cast<::abacus::protobuf::Enum8Metric&>(::abacus::protobuf::_Enum8Metric_default_instance_);
}
inline const ::abacus::protobuf::Enum8Metric& Metric::enum8() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.enum8)
  return _internal_enum8();
}
inline ::abacus::protobuf::Enum8Metric* Metric::unsafe_arena_release_enum8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.enum8)
  if (type_case() == kEnum8) {
    clear_has_type();
    ::abacus::protobuf::Enum8Metric* temp = _impl_.type_.enum8_;
    _impl_.type_.enum8_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_enum8(::abacus::protobuf::Enum8Metric* enum8) {
  clear_type();
  if (enum8) {
    set_has_enum8();
    _impl_.type_.enum8_ = enum8;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.enum8)
}
inline ::abacus::protobuf::Enum8Metric* Metric::_internal_mutable_enum8() {
  if (type_case() != kEnum8) {
    clear_type();
    set_has_enum8();
    _impl_.type_.enum8_ = CreateMaybeMessage< ::abacus::protobuf::Enum8Metric >(GetArenaForAllocation());
  }
  return _impl_.type_.enum8_;
}
inline ::abacus::protobuf::Enum8Metric* Metric::mutable_enum8() {
  ::abacus::protobuf::Enum8Metric* _msg = _internal_mutable_enum8();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.enum8)
  return _msg;
}

// .abacus.protobuf.StringMetric string = 11;
inline bool Metric::has_string() const {
  return type_case() == kString;
}
inline bool Metric::_internal_has_string() const {
  return type_case() == kString;
}
inline void Metric::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void Metric::clear_string() {
  if (type_case() == kString) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.string_;
    }
    clear_has_type();
  }
}
inline ::abacus::protobuf::StringMetric* Metric::release_string() {
  // @@protoc_insertion_point(field_release:abacus.protobuf.Metric.string)
  if (type_case() == kString) {
    clear_has_type();
    ::abacus::protobuf::StringMetric* temp = _impl_.type_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::abacus::protobuf::StringMetric& Metric::_internal_string() const {
  return type_case() == kString
      ? *_impl_.type_.string_
      : reinterpret_cast<::abacus::protobuf::StringMetric&>(::abacus::protobuf::_StringMetric_default_instance_);
}
inline const ::abacus::protobuf::StringMetric& Metric::string() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.Metric.string)
  return _internal_string();
}
inline ::abacus::protobuf::StringMetric* Metric::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:abacus.protobuf.Metric.string)
  if (type_case() == kString) {
    clear_has_type();
    ::abacus::protobuf::StringMetric* temp = _impl_.type_.string_;
    _impl_.type_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_string(::abacus::protobuf::StringMetric* string) {
  clear_type();
  if (string) {
    set_has_string();
    _impl_.type_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:abacus.protobuf.Metric.string)
}
inline ::abacus::protobuf::StringMetric* Metric::_internal_mutable_string() {
  if (type_case() != kString) {
    clear_type();
    set_has_string();
    _impl_.type_.string_ = CreateMaybeMessage< ::abacus::protobuf::StringMetric >(GetArenaForAllocation());
  }
  return _impl_.type_.string_;
}
inline ::abacus::protobuf::StringMetric* Metric::mutable_string() {
  ::abacus::protobuf::StringMetric* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:abacus.protobuf.Metric.string)
  return _msg;
}

inline bool Metric::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Metric::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline Metric::TypeCase Metric::type_case() const {
  return Metric::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetricsMetadata

// uint32 protocol_version = 1;
inline void MetricsMetadata::clear_protocol_version() {
  _impl_.protocol_version_ = 0u;
}
inline ::uint32_t MetricsMetadata::protocol_version() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.MetricsMetadata.protocol_version)
  return _internal_protocol_version();
}
inline void MetricsMetadata::set_protocol_version(::uint32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.MetricsMetadata.protocol_version)
}
inline ::uint32_t MetricsMetadata::_internal_protocol_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.protocol_version_;
}
inline void MetricsMetadata::_internal_set_protocol_version(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.protocol_version_ = value;
}

// .abacus.protobuf.Endianness endianness = 2;
inline void MetricsMetadata::clear_endianness() {
  _impl_.endianness_ = 0;
}
inline ::abacus::protobuf::Endianness MetricsMetadata::endianness() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.MetricsMetadata.endianness)
  return _internal_endianness();
}
inline void MetricsMetadata::set_endianness(::abacus::protobuf::Endianness value) {
  _internal_set_endianness(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.MetricsMetadata.endianness)
}
inline ::abacus::protobuf::Endianness MetricsMetadata::_internal_endianness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::abacus::protobuf::Endianness>(_impl_.endianness_);
}
inline void MetricsMetadata::_internal_set_endianness(::abacus::protobuf::Endianness value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endianness_ = value;
}

// fixed32 sync_value = 3;
inline void MetricsMetadata::clear_sync_value() {
  _impl_.sync_value_ = 0u;
}
inline ::uint32_t MetricsMetadata::sync_value() const {
  // @@protoc_insertion_point(field_get:abacus.protobuf.MetricsMetadata.sync_value)
  return _internal_sync_value();
}
inline void MetricsMetadata::set_sync_value(::uint32_t value) {
  _internal_set_sync_value(value);
  // @@protoc_insertion_point(field_set:abacus.protobuf.MetricsMetadata.sync_value)
}
inline ::uint32_t MetricsMetadata::_internal_sync_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sync_value_;
}
inline void MetricsMetadata::_internal_set_sync_value(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sync_value_ = value;
}

// map<string, .abacus.protobuf.Metric> metrics = 4;
inline int MetricsMetadata::_internal_metrics_size() const {
  return _internal_metrics().size();
}
inline int MetricsMetadata::metrics_size() const {
  return _internal_metrics_size();
}
inline void MetricsMetadata::clear_metrics() {
  _impl_.metrics_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>& MetricsMetadata::_internal_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metrics_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>& MetricsMetadata::metrics() const {
  // @@protoc_insertion_point(field_map:abacus.protobuf.MetricsMetadata.metrics)
  return _internal_metrics();
}
inline ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>* MetricsMetadata::_internal_mutable_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metrics_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::abacus::protobuf::Metric>* MetricsMetadata::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:abacus.protobuf.MetricsMetadata.metrics)
  return _internal_mutable_metrics();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace abacus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::abacus::protobuf::Endianness> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::abacus::protobuf::Endianness>() {
  return ::abacus::protobuf::Endianness_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_abacus_2fprotobuf_2fmetrics_2eproto_2epb_2eh
