// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abacus/protobuf/metrics.proto

#include "abacus/protobuf/metrics.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace abacus {
namespace protobuf {
        template <typename>
PROTOBUF_CONSTEXPR Info::Info(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.description_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.unit_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.kind_)*/ 0,
      /*decltype(_impl_.min_)*/ {},
      /*decltype(_impl_.max_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoDefaultTypeInternal _Info_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Metric::Metric(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.info_)*/ nullptr,
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Metrics::Metrics(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.metric_)*/ {},
      /*decltype(_impl_.protocol_version_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsDefaultTypeInternal() {}
  union {
    Metrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsDefaultTypeInternal _Metrics_default_instance_;
}  // namespace protobuf
}  // namespace abacus
static ::_pb::Metadata file_level_metadata_abacus_2fprotobuf_2fmetrics_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_abacus_2fprotobuf_2fmetrics_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_abacus_2fprotobuf_2fmetrics_2eproto = nullptr;
const ::uint32_t TableStruct_abacus_2fprotobuf_2fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_.unit_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_.min_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_.max_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metric, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metric, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metric, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metric, _impl_.info_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metric, _impl_.value_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metrics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metrics, _impl_.protocol_version_),
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metrics, _impl_.metric_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::abacus::protobuf::Info)},
        {21, 35, -1, sizeof(::abacus::protobuf::Metric)},
        {40, -1, -1, sizeof(::abacus::protobuf::Metrics)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::abacus::protobuf::_Info_default_instance_._instance,
    &::abacus::protobuf::_Metric_default_instance_._instance,
    &::abacus::protobuf::_Metrics_default_instance_._instance,
};
const char descriptor_table_protodef_abacus_2fprotobuf_2fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035abacus/protobuf/metrics.proto\022\017abacus."
    "protobuf\"\223\002\n\004Info\022\014\n\004name\030\001 \001(\t\022\023\n\013descr"
    "iption\030\002 \001(\t\022#\n\004type\030\003 \001(\0162\025.abacus.prot"
    "obuf.Type\022#\n\004kind\030\004 \001(\0162\025.abacus.protobu"
    "f.Kind\022\014\n\004unit\030\005 \001(\t\022\024\n\nuint64_min\030\006 \001(\004"
    "H\000\022\023\n\tint64_min\030\007 \001(\003H\000\022\025\n\013float64_min\030\010"
    " \001(\001H\000\022\024\n\nuint64_max\030\t \001(\004H\001\022\023\n\tint64_ma"
    "x\030\n \001(\003H\001\022\025\n\013float64_max\030\013 \001(\001H\001B\005\n\003minB"
    "\005\n\003max\"\242\001\n\006Metric\022(\n\004info\030\001 \001(\0132\025.abacus"
    ".protobuf.InfoH\001\210\001\001\022\026\n\014uint64_value\030\002 \001("
    "\004H\000\022\025\n\013int64_value\030\003 \001(\003H\000\022\027\n\rfloat64_va"
    "lue\030\004 \001(\001H\000\022\024\n\nbool_value\030\005 \001(\010H\000B\007\n\005val"
    "ueB\007\n\005_info\"L\n\007Metrics\022\030\n\020protocol_versi"
    "on\030\001 \001(\r\022\'\n\006metric\030\002 \003(\0132\027.abacus.protob"
    "uf.Metric*,\n\004Kind\022\013\n\007COUNTER\020\000\022\014\n\010CONSTA"
    "NT\020\001\022\t\n\005GAUGE\020\002*4\n\004Type\022\n\n\006UINT64\020\000\022\t\n\005I"
    "NT64\020\001\022\013\n\007FLOAT64\020\002\022\010\n\004BOOL\020\003B\021Z\017abacus/"
    "protobufb\006proto3"
};
static ::absl::once_flag descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto = {
    false,
    false,
    696,
    descriptor_table_protodef_abacus_2fprotobuf_2fmetrics_2eproto,
    "abacus/protobuf/metrics.proto",
    &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_abacus_2fprotobuf_2fmetrics_2eproto::offsets,
    file_level_metadata_abacus_2fprotobuf_2fmetrics_2eproto,
    file_level_enum_descriptors_abacus_2fprotobuf_2fmetrics_2eproto,
    file_level_service_descriptors_abacus_2fprotobuf_2fmetrics_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_getter() {
  return &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_abacus_2fprotobuf_2fmetrics_2eproto(&descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto);
namespace abacus {
namespace protobuf {
const ::google::protobuf::EnumDescriptor* Kind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto);
  return file_level_enum_descriptors_abacus_2fprotobuf_2fmetrics_2eproto[0];
}
bool Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto);
  return file_level_enum_descriptors_abacus_2fprotobuf_2fmetrics_2eproto[1];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Info::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Info, _impl_._oneof_case_);
};

Info::Info(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abacus.protobuf.Info)
}
Info::Info(const Info& from) : ::google::protobuf::Message() {
  Info* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.description_){},
      decltype(_impl_.unit_){},
      decltype(_impl_.type_){},
      decltype(_impl_.kind_){},
      decltype(_impl_.min_){},
      decltype(_impl_.max_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unit().empty()) {
    _this->_impl_.unit_.Set(from._internal_unit(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.kind_));
  clear_has_min();
  switch (from.min_case()) {
    case kUint64Min: {
      _this->_internal_set_uint64_min(from._internal_uint64_min());
      break;
    }
    case kInt64Min: {
      _this->_internal_set_int64_min(from._internal_int64_min());
      break;
    }
    case kFloat64Min: {
      _this->_internal_set_float64_min(from._internal_float64_min());
      break;
    }
    case MIN_NOT_SET: {
      break;
    }
  }
  clear_has_max();
  switch (from.max_case()) {
    case kUint64Max: {
      _this->_internal_set_uint64_max(from._internal_uint64_max());
      break;
    }
    case kInt64Max: {
      _this->_internal_set_int64_max(from._internal_int64_max());
      break;
    }
    case kFloat64Max: {
      _this->_internal_set_float64_max(from._internal_float64_max());
      break;
    }
    case MAX_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:abacus.protobuf.Info)
}
inline void Info::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.description_){},
      decltype(_impl_.unit_){},
      decltype(_impl_.type_){0},
      decltype(_impl_.kind_){0},
      decltype(_impl_.min_){},
      decltype(_impl_.max_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_min();
  clear_has_max();
}
Info::~Info() {
  // @@protoc_insertion_point(destructor:abacus.protobuf.Info)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Info::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.unit_.Destroy();
  if (has_min()) {
    clear_min();
  }
  if (has_max()) {
    clear_max();
  }
}
void Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Info::clear_min() {
// @@protoc_insertion_point(one_of_clear_start:abacus.protobuf.Info)
  switch (min_case()) {
    case kUint64Min: {
      // No need to clear
      break;
    }
    case kInt64Min: {
      // No need to clear
      break;
    }
    case kFloat64Min: {
      // No need to clear
      break;
    }
    case MIN_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MIN_NOT_SET;
}

void Info::clear_max() {
// @@protoc_insertion_point(one_of_clear_start:abacus.protobuf.Info)
  switch (max_case()) {
    case kUint64Max: {
      // No need to clear
      break;
    }
    case kInt64Max: {
      // No need to clear
      break;
    }
    case kFloat64Max: {
      // No need to clear
      break;
    }
    case MAX_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = MAX_NOT_SET;
}


PROTOBUF_NOINLINE void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:abacus.protobuf.Info)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.unit_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.kind_));
  clear_min();
  clear_max();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Info::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 11, 0, 56, 2> Info::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Info_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.name_)}},
    // string description = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.description_)}},
    // .abacus.protobuf.Type type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Info, _impl_.type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.type_)}},
    // .abacus.protobuf.Kind kind = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Info, _impl_.kind_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.kind_)}},
    // string unit = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.unit_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .abacus.protobuf.Type type = 3;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .abacus.protobuf.Kind kind = 4;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string unit = 5;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 uint64_min = 6;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.min_.uint64_min_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt64)},
    // int64 int64_min = 7;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.min_.int64_min_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // double float64_min = 8;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.min_.float64_min_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // uint64 uint64_max = 9;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.max_.uint64_max_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt64)},
    // int64 int64_max = 10;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.max_.int64_max_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // double float64_max = 11;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.max_.float64_max_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\24\4\13\0\0\4\0\0\0\0\0\0\0\0\0\0"
    "abacus.protobuf.Info"
    "name"
    "description"
    "unit"
  }},
};

::uint8_t* Info::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abacus.protobuf.Info)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "abacus.protobuf.Info.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "abacus.protobuf.Info.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .abacus.protobuf.Type type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // .abacus.protobuf.Kind kind = 4;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_kind(), target);
  }

  // string unit = 5;
  if (!this->_internal_unit().empty()) {
    const std::string& _s = this->_internal_unit();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "abacus.protobuf.Info.unit");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  switch (min_case()) {
    case kUint64Min: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          6, this->_internal_uint64_min(), target);
      break;
    }
    case kInt64Min: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<7>(
              stream, this->_internal_int64_min(), target);
      break;
    }
    case kFloat64Min: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          8, this->_internal_float64_min(), target);
      break;
    }
    default:
      break;
  }
  switch (max_case()) {
    case kUint64Max: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          9, this->_internal_uint64_max(), target);
      break;
    }
    case kInt64Max: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<10>(
              stream, this->_internal_int64_max(), target);
      break;
    }
    case kFloat64Max: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          11, this->_internal_float64_max(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abacus.protobuf.Info)
  return target;
}

::size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abacus.protobuf.Info)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string unit = 5;
  if (!this->_internal_unit().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_unit());
  }

  // .abacus.protobuf.Type type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .abacus.protobuf.Kind kind = 4;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  switch (min_case()) {
    // uint64 uint64_min = 6;
    case kUint64Min: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uint64_min());
      break;
    }
    // int64 int64_min = 7;
    case kInt64Min: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int64_min());
      break;
    }
    // double float64_min = 8;
    case kFloat64Min: {
      total_size += 9;
      break;
    }
    case MIN_NOT_SET: {
      break;
    }
  }
  switch (max_case()) {
    // uint64 uint64_max = 9;
    case kUint64Max: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uint64_max());
      break;
    }
    // int64 int64_max = 10;
    case kInt64Max: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int64_max());
      break;
    }
    // double float64_max = 11;
    case kFloat64Max: {
      total_size += 9;
      break;
    }
    case MAX_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Info::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Info::MergeImpl
};
const ::google::protobuf::Message::ClassData*Info::GetClassData() const { return &_class_data_; }


void Info::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Info*>(&to_msg);
  auto& from = static_cast<const Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abacus.protobuf.Info)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  switch (from.min_case()) {
    case kUint64Min: {
      _this->_internal_set_uint64_min(from._internal_uint64_min());
      break;
    }
    case kInt64Min: {
      _this->_internal_set_int64_min(from._internal_int64_min());
      break;
    }
    case kFloat64Min: {
      _this->_internal_set_float64_min(from._internal_float64_min());
      break;
    }
    case MIN_NOT_SET: {
      break;
    }
  }
  switch (from.max_case()) {
    case kUint64Max: {
      _this->_internal_set_uint64_max(from._internal_uint64_max());
      break;
    }
    case kInt64Max: {
      _this->_internal_set_int64_max(from._internal_int64_max());
      break;
    }
    case kFloat64Max: {
      _this->_internal_set_float64_max(from._internal_float64_max());
      break;
    }
    case MAX_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abacus.protobuf.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Info::IsInitialized() const {
  return true;
}

void Info::InternalSwap(Info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unit_, lhs_arena,
                                       &other->_impl_.unit_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Info, _impl_.kind_)
      + sizeof(Info::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(Info, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
  swap(_impl_.min_, other->_impl_.min_);
  swap(_impl_.max_, other->_impl_.max_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_getter, &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_once,
      file_level_metadata_abacus_2fprotobuf_2fmetrics_2eproto[0]);
}
// ===================================================================

class Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<Metric>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Metric, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::abacus::protobuf::Metric, _impl_._oneof_case_);
  static const ::abacus::protobuf::Info& info(const Metric* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::abacus::protobuf::Info& Metric::_Internal::info(const Metric* msg) {
  return *msg->_impl_.info_;
}
Metric::Metric(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abacus.protobuf.Metric)
}
Metric::Metric(const Metric& from) : ::google::protobuf::Message() {
  Metric* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.info_){nullptr},
      decltype(_impl_.value_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::abacus::protobuf::Info(*from._impl_.info_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kUint64Value: {
      _this->_internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kFloat64Value: {
      _this->_internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:abacus.protobuf.Metric)
}
inline void Metric::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.info_){nullptr},
      decltype(_impl_.value_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
Metric::~Metric() {
  // @@protoc_insertion_point(destructor:abacus.protobuf.Metric)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Metric::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
  if (has_value()) {
    clear_value();
  }
}
void Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metric::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:abacus.protobuf.Metric)
  switch (value_case()) {
    case kUint64Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kFloat64Value: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:abacus.protobuf.Metric)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Metric::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 1, 0, 2> Metric::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Metric, _impl_._has_bits_),
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Metric_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abacus.protobuf.Info info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Metric, _impl_.info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abacus.protobuf.Info info = 1;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 uint64_value = 2;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.value_.uint64_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt64)},
    // int64 int64_value = 3;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.value_.int64_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // double float64_value = 4;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.value_.float64_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // bool bool_value = 5;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.value_.bool_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abacus::protobuf::Info>()},
  }}, {{
  }},
};

::uint8_t* Metric::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abacus.protobuf.Metric)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abacus.protobuf.Info info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  switch (value_case()) {
    case kUint64Value: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          2, this->_internal_uint64_value(), target);
      break;
    }
    case kInt64Value: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<3>(
              stream, this->_internal_int64_value(), target);
      break;
    }
    case kFloat64Value: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this->_internal_float64_value(), target);
      break;
    }
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this->_internal_bool_value(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abacus.protobuf.Metric)
  return target;
}

::size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abacus.protobuf.Metric)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .abacus.protobuf.Info info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  switch (value_case()) {
    // uint64 uint64_value = 2;
    case kUint64Value: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uint64_value());
      break;
    }
    // int64 int64_value = 3;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int64_value());
      break;
    }
    // double float64_value = 4;
    case kFloat64Value: {
      total_size += 9;
      break;
    }
    // bool bool_value = 5;
    case kBoolValue: {
      total_size += 2;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Metric::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Metric::MergeImpl
};
const ::google::protobuf::Message::ClassData*Metric::GetClassData() const { return &_class_data_; }


void Metric::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abacus.protobuf.Metric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::abacus::protobuf::Info::MergeFrom(
        from._internal_info());
  }
  switch (from.value_case()) {
    case kUint64Value: {
      _this->_internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kFloat64Value: {
      _this->_internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abacus.protobuf.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_getter, &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_once,
      file_level_metadata_abacus_2fprotobuf_2fmetrics_2eproto[1]);
}
// ===================================================================

class Metrics::_Internal {
 public:
};

Metrics::Metrics(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abacus.protobuf.Metrics)
}
Metrics::Metrics(const Metrics& from) : ::google::protobuf::Message() {
  Metrics* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_){from._impl_.metric_},
      decltype(_impl_.protocol_version_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.protocol_version_ = from._impl_.protocol_version_;

  // @@protoc_insertion_point(copy_constructor:abacus.protobuf.Metrics)
}
inline void Metrics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_){arena},
      decltype(_impl_.protocol_version_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:abacus.protobuf.Metrics)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Metrics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metric_.~RepeatedPtrField();
}
void Metrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:abacus.protobuf.Metrics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_metric()->Clear();
  _impl_.protocol_version_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Metrics::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Metrics::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Metrics_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .abacus.protobuf.Metric metric = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Metrics, _impl_.metric_)}},
    // uint32 protocol_version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Metrics, _impl_.protocol_version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Metrics, _impl_.protocol_version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 protocol_version = 1;
    {PROTOBUF_FIELD_OFFSET(Metrics, _impl_.protocol_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .abacus.protobuf.Metric metric = 2;
    {PROTOBUF_FIELD_OFFSET(Metrics, _impl_.metric_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abacus::protobuf::Metric>()},
  }}, {{
  }},
};

::uint8_t* Metrics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abacus.protobuf.Metrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_protocol_version(), target);
  }

  // repeated .abacus.protobuf.Metric metric = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metric_size()); i < n; i++) {
    const auto& repfield = this->_internal_metric().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abacus.protobuf.Metrics)
  return target;
}

::size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abacus.protobuf.Metrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abacus.protobuf.Metric metric = 2;
  total_size += 1UL * this->_internal_metric_size();
  for (const auto& msg : this->_internal_metric()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // uint32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_protocol_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Metrics::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Metrics::MergeImpl
};
const ::google::protobuf::Message::ClassData*Metrics::GetClassData() const { return &_class_data_; }


void Metrics::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Metrics*>(&to_msg);
  auto& from = static_cast<const Metrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abacus.protobuf.Metrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metric()->MergeFrom(from._internal_metric());
  if (from._internal_protocol_version() != 0) {
    _this->_internal_set_protocol_version(from._internal_protocol_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abacus.protobuf.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metric_.InternalSwap(&other->_impl_.metric_);
        swap(_impl_.protocol_version_, other->_impl_.protocol_version_);
}

::google::protobuf::Metadata Metrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_getter, &descriptor_table_abacus_2fprotobuf_2fmetrics_2eproto_once,
      file_level_metadata_abacus_2fprotobuf_2fmetrics_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace abacus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
